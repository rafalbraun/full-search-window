<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Gtk" version="3.0"/>
  <include name="GtkSource" version="3.0"/>
  <namespace name="Xed"
             version="1.0"
             shared-library=""
             c:identifier-prefixes="Xed"
             c:symbol-prefixes="xed">
    <class name="App"
           c:symbol-prefix="app"
           c:type="XedApp"
           parent="Gtk.Application"
           glib:type-name="XedApp"
           glib:get-type="xed_app_get_type"
           glib:type-struct="AppClass">
      <implements name="Gio.ActionGroup"/>
      <implements name="Gio.ActionMap"/>
      <virtual-method name="help_link_id">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <type name="App" c:type="XedApp*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="link_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_window_title" invoker="set_window_title">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <type name="App" c:type="XedApp*"/>
          </instance-parameter>
          <parameter name="window" transfer-ownership="none">
            <type name="Window" c:type="XedWindow*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="show_help" invoker="show_help">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <type name="App" c:type="XedApp*"/>
          </instance-parameter>
          <parameter name="parent" transfer-ownership="none">
            <type name="Gtk.Window" c:type="GtkWindow*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="link_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="create_window" c:identifier="xed_app_create_window">
        <doc xml:space="preserve">Create a new #XedWindow part of @app.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the new #XedWindow</doc>
          <type name="Window" c:type="XedWindow*"/>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <doc xml:space="preserve">the #XedApp</doc>
            <type name="App" c:type="XedApp*"/>
          </instance-parameter>
          <parameter name="screen"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gdk.Screen" c:type="GdkScreen*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_documents" c:identifier="xed_app_get_documents">
        <doc xml:space="preserve">Returns all the documents currently open in #XedApp.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">
a newly allocated list of #XedDocument objects</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Document"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <doc xml:space="preserve">the #XedApp</doc>
            <type name="App" c:type="XedApp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_main_windows" c:identifier="xed_app_get_main_windows">
        <doc xml:space="preserve">Returns all #XedWindows currently open in #XedApp.
This differs from gtk_application_get_windows() since it does not
include the preferences dialog and other auxiliary windows.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">
a newly allocated list of #XedWindow objects</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Window"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <doc xml:space="preserve">the #GeditApp</doc>
            <type name="App" c:type="XedApp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_views" c:identifier="xed_app_get_views">
        <doc xml:space="preserve">Returns all the views currently present in #XedApp.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">
a newly allocated list of #XedView objects</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="View"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <doc xml:space="preserve">the #XedApp</doc>
            <type name="App" c:type="XedApp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_window_title" c:identifier="xed_app_set_window_title">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <type name="App" c:type="XedApp*"/>
          </instance-parameter>
          <parameter name="window" transfer-ownership="none">
            <type name="Window" c:type="XedWindow*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="show_help" c:identifier="xed_app_show_help">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="app" transfer-ownership="none">
            <type name="App" c:type="XedApp*"/>
          </instance-parameter>
          <parameter name="parent" transfer-ownership="none">
            <type name="Gtk.Window" c:type="GtkWindow*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="link_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Gtk.Application" c:type="GtkApplication"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="AppPrivate" c:type="XedAppPrivate*"/>
      </field>
    </class>
    <interface name="AppActivatable"
               c:symbol-prefix="app_activatable"
               c:type="XedAppActivatable"
               glib:type-name="XedAppActivatable"
               glib:get-type="xed_app_activatable_get_type"
               glib:type-struct="AppActivatableInterface">
      <virtual-method name="activate" invoker="activate">
        <doc xml:space="preserve">Activates the extension on the application.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="activatable" transfer-ownership="none">
            <doc xml:space="preserve">A #XedAppActivatable.</doc>
            <type name="AppActivatable" c:type="XedAppActivatable*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="deactivate" invoker="deactivate">
        <doc xml:space="preserve">Deactivates the extension from the application.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="activatable" transfer-ownership="none">
            <doc xml:space="preserve">A #XedAppActivatable.</doc>
            <type name="AppActivatable" c:type="XedAppActivatable*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="activate" c:identifier="xed_app_activatable_activate">
        <doc xml:space="preserve">Activates the extension on the application.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="activatable" transfer-ownership="none">
            <doc xml:space="preserve">A #XedAppActivatable.</doc>
            <type name="AppActivatable" c:type="XedAppActivatable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="deactivate" c:identifier="xed_app_activatable_deactivate">
        <doc xml:space="preserve">Deactivates the extension from the application.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="activatable" transfer-ownership="none">
            <doc xml:space="preserve">A #XedAppActivatable.</doc>
            <type name="AppActivatable" c:type="XedAppActivatable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="app"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The app property contains the xed app for this
#XedAppActivatable instance.</doc>
        <type name="App"/>
      </property>
    </interface>
    <record name="AppActivatableInterface"
            c:type="XedAppActivatableInterface"
            glib:is-gtype-struct-for="AppActivatable">
      <field name="g_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="activate">
        <callback name="activate">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="activatable" transfer-ownership="none">
              <doc xml:space="preserve">A #XedAppActivatable.</doc>
              <type name="AppActivatable" c:type="XedAppActivatable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="deactivate">
        <callback name="deactivate">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="activatable" transfer-ownership="none">
              <doc xml:space="preserve">A #XedAppActivatable.</doc>
              <type name="AppActivatable" c:type="XedAppActivatable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="AppClass"
            c:type="XedAppClass"
            glib:is-gtype-struct-for="App">
      <field name="parent_class">
        <type name="Gtk.ApplicationClass" c:type="GtkApplicationClass"/>
      </field>
      <field name="show_help">
        <callback name="show_help">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="app" transfer-ownership="none">
              <type name="App" c:type="XedApp*"/>
            </parameter>
            <parameter name="parent" transfer-ownership="none">
              <type name="Gtk.Window" c:type="GtkWindow*"/>
            </parameter>
            <parameter name="name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="link_id" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="help_link_id">
        <callback name="help_link_id">
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="app" transfer-ownership="none">
              <type name="App" c:type="XedApp*"/>
            </parameter>
            <parameter name="name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="link_id" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_window_title">
        <callback name="set_window_title">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="app" transfer-ownership="none">
              <type name="App" c:type="XedApp*"/>
            </parameter>
            <parameter name="window" transfer-ownership="none">
              <type name="Window" c:type="XedWindow*"/>
            </parameter>
            <parameter name="title" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="AppPrivate" c:type="XedAppPrivate" disguised="1">
    </record>
    <bitfield name="DebugSection"
              glib:type-name="XedDebugSection"
              glib:get-type="xed_debug_section_get_type"
              c:type="XedDebugSection">
      <member name="no_debug"
              value="0"
              c:identifier="XED_NO_DEBUG"
              glib:nick="no-debug">
      </member>
      <member name="debug_view"
              value="1"
              c:identifier="XED_DEBUG_VIEW"
              glib:nick="debug-view">
      </member>
      <member name="debug_search"
              value="2"
              c:identifier="XED_DEBUG_SEARCH"
              glib:nick="debug-search">
      </member>
      <member name="debug_print"
              value="4"
              c:identifier="XED_DEBUG_PRINT"
              glib:nick="debug-print">
      </member>
      <member name="debug_prefs"
              value="8"
              c:identifier="XED_DEBUG_PREFS"
              glib:nick="debug-prefs">
      </member>
      <member name="debug_plugins"
              value="16"
              c:identifier="XED_DEBUG_PLUGINS"
              glib:nick="debug-plugins">
      </member>
      <member name="debug_tab"
              value="32"
              c:identifier="XED_DEBUG_TAB"
              glib:nick="debug-tab">
      </member>
      <member name="debug_document"
              value="64"
              c:identifier="XED_DEBUG_DOCUMENT"
              glib:nick="debug-document">
      </member>
      <member name="debug_commands"
              value="128"
              c:identifier="XED_DEBUG_COMMANDS"
              glib:nick="debug-commands">
      </member>
      <member name="debug_app"
              value="256"
              c:identifier="XED_DEBUG_APP"
              glib:nick="debug-app">
      </member>
      <member name="debug_session"
              value="512"
              c:identifier="XED_DEBUG_SESSION"
              glib:nick="debug-session">
      </member>
      <member name="debug_utils"
              value="1024"
              c:identifier="XED_DEBUG_UTILS"
              glib:nick="debug-utils">
      </member>
      <member name="debug_metadata"
              value="2048"
              c:identifier="XED_DEBUG_METADATA"
              glib:nick="debug-metadata">
      </member>
      <member name="debug_window"
              value="4096"
              c:identifier="XED_DEBUG_WINDOW"
              glib:nick="debug-window">
      </member>
      <member name="debug_loader"
              value="8192"
              c:identifier="XED_DEBUG_LOADER"
              glib:nick="debug-loader">
      </member>
      <member name="debug_saver"
              value="16384"
              c:identifier="XED_DEBUG_SAVER"
              glib:nick="debug-saver">
      </member>
    </bitfield>
    <class name="Document"
           c:symbol-prefix="document"
           c:type="XedDocument"
           parent="GtkSource.Buffer"
           glib:type-name="XedDocument"
           glib:get-type="xed_document_get_type"
           glib:type-struct="DocumentClass">
      <constructor name="new" c:identifier="xed_document_new">
        <return-value transfer-ownership="full">
          <type name="Document" c:type="XedDocument*"/>
        </return-value>
      </constructor>
      <virtual-method name="cursor_moved">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="Document" c:type="XedDocument*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="load">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="Document" c:type="XedDocument*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="loaded">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="Document" c:type="XedDocument*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="save">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="Document" c:type="XedDocument*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="saved">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="document" transfer-ownership="none">
            <type name="Document" c:type="XedDocument*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="get_content_type"
              c:identifier="xed_document_get_content_type">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <type name="Document" c:type="XedDocument*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_deleted" c:identifier="xed_document_get_deleted">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <type name="Document" c:type="XedDocument*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_encoding" c:identifier="xed_document_get_encoding">
        <return-value transfer-ownership="none">
          <type name="GtkSource.Encoding" c:type="const GtkSourceEncoding*"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <type name="Document" c:type="XedDocument*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_file" c:identifier="xed_document_get_file">
        <doc xml:space="preserve">Gets the associated #GtkSourceFile. You should use it only for reading
purposes, not for creating a #GtkSourceFileLoader or #GtkSourceFileSaver,
because xed does some extra work when loading or saving a file and
maintains an internal state. If you use in a plugin a file loader or saver on
the returned #GtkSourceFile, the internal state of xed won't be updated.

If you want to save the #GeditDocument to a secondary file, you can create a
new #GtkSourceFile and use a #GtkSourceFileSaver.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the associated #GtkSourceFile.</doc>
          <type name="GtkSource.File" c:type="GtkSourceFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <doc xml:space="preserve">a #XedDocument.</doc>
            <type name="Document" c:type="XedDocument*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_language" c:identifier="xed_document_get_language">
        <return-value transfer-ownership="none">
          <type name="GtkSource.Language" c:type="GtkSourceLanguage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <type name="Document" c:type="XedDocument*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_location" c:identifier="xed_document_get_location">
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve">a new #GFile</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <doc xml:space="preserve">a #XedDocument</doc>
            <type name="Document" c:type="XedDocument*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_metadata" c:identifier="xed_document_get_metadata">
        <doc xml:space="preserve">Gets the metadata assigned to @key.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the value assigned to @key. Free with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <doc xml:space="preserve">a #XedDocument</doc>
            <type name="Document" c:type="XedDocument*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">name of the key</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_mime_type" c:identifier="xed_document_get_mime_type">
        <doc xml:space="preserve">Note: this never returns %NULL.</doc>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <doc xml:space="preserve">a #XedDocument</doc>
            <type name="Document" c:type="XedDocument*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_newline_type"
              c:identifier="xed_document_get_newline_type">
        <return-value transfer-ownership="none">
          <type name="GtkSource.NewlineType" c:type="GtkSourceNewlineType"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <type name="Document" c:type="XedDocument*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_readonly" c:identifier="xed_document_get_readonly">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <type name="Document" c:type="XedDocument*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_search_context"
              c:identifier="xed_document_get_search_context"
              introspectable="0">
        <return-value>
          <doc xml:space="preserve">the current search context of the document,
or NULL if there is no search context</doc>
          <type name="GtkSource.SearchContext"
                c:type="GtkSourceSearchContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <doc xml:space="preserve">a #XedDocument</doc>
            <type name="Document" c:type="XedDocument*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_short_name_for_display"
              c:identifier="xed_document_get_short_name_for_display">
        <doc xml:space="preserve">Note: this never returns %NULL.</doc>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <doc xml:space="preserve">a #XedDocument</doc>
            <type name="Document" c:type="XedDocument*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uri_for_display"
              c:identifier="xed_document_get_uri_for_display">
        <doc xml:space="preserve">Note: this never returns %NULL.</doc>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <doc xml:space="preserve">a #XedDocument</doc>
            <type name="Document" c:type="XedDocument*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="goto_line" c:identifier="xed_document_goto_line">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <type name="Document" c:type="XedDocument*"/>
          </instance-parameter>
          <parameter name="line" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="goto_line_offset"
              c:identifier="xed_document_goto_line_offset">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <type name="Document" c:type="XedDocument*"/>
          </instance-parameter>
          <parameter name="line" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="line_offset" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_local" c:identifier="xed_document_is_local">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <type name="Document" c:type="XedDocument*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_untitled" c:identifier="xed_document_is_untitled">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <type name="Document" c:type="XedDocument*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_untouched" c:identifier="xed_document_is_untouched">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <type name="Document" c:type="XedDocument*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_content_type"
              c:identifier="xed_document_set_content_type">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <type name="Document" c:type="XedDocument*"/>
          </instance-parameter>
          <parameter name="content_type"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_language" c:identifier="xed_document_set_language">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <type name="Document" c:type="XedDocument*"/>
          </instance-parameter>
          <parameter name="lang"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="GtkSource.Language" c:type="GtkSourceLanguage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_location" c:identifier="xed_document_set_location">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <type name="Document" c:type="XedDocument*"/>
          </instance-parameter>
          <parameter name="location" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_metadata"
              c:identifier="xed_document_set_metadata"
              introspectable="0">
        <doc xml:space="preserve">Sets metadata on a document.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <doc xml:space="preserve">a #XedDocument</doc>
            <type name="Document" c:type="XedDocument*"/>
          </instance-parameter>
          <parameter name="first_key" transfer-ownership="none">
            <doc xml:space="preserve">name of the first key to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve">value for the first key, followed optionally by more key/value pairs,
followed by %NULL.</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="set_search_context"
              c:identifier="xed_document_set_search_context">
        <doc xml:space="preserve">Sets the new search context for the document.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <doc xml:space="preserve">a #XedDocument</doc>
            <type name="Document" c:type="XedDocument*"/>
          </instance-parameter>
          <parameter name="search_context"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the new #GtkSourceSearchContext</doc>
            <type name="GtkSource.SearchContext"
                  c:type="GtkSourceSearchContext*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_short_name_for_display"
              c:identifier="xed_document_set_short_name_for_display">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="doc" transfer-ownership="none">
            <type name="Document" c:type="XedDocument*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="content-type" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The documents content type.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="mime-type" transfer-ownership="none">
        <doc xml:space="preserve">The documents MIME type.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="read-only" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="shortname" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">The documents short name.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="use-gvfs-metadata"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Whether to use GVFS metadata. If %FALSE, use the xed metadata
manager that stores the metadata in an XML file in the user cache
directory.

&lt;warning&gt;
The property is used internally by xed. It must not be used in a
xed plugin. The property can be modified or removed at any time.
&lt;/warning&gt;</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="GtkSource.Buffer" c:type="GtkSourceBuffer"/>
      </field>
      <glib:signal name="cursor-moved" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="load" when="last">
        <doc xml:space="preserve">The "load" signal is emitted at the beginning of file loading.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="loaded" when="first">
        <doc xml:space="preserve">The "loaded" signal is emitted at the end of a successful loading.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="save" when="last">
        <doc xml:space="preserve">The "save" signal is emitted at the beginning of file saving.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="saved" when="first">
        <doc xml:space="preserve">The "saved" signal is emitted at the end of a successful file saving.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="DocumentClass"
            c:type="XedDocumentClass"
            glib:is-gtype-struct-for="Document">
      <field name="parent_class">
        <type name="GtkSource.BufferClass" c:type="GtkSourceBufferClass"/>
      </field>
      <field name="cursor_moved">
        <callback name="cursor_moved">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="document" transfer-ownership="none">
              <type name="Document" c:type="XedDocument*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="load">
        <callback name="load">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="document" transfer-ownership="none">
              <type name="Document" c:type="XedDocument*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="loaded">
        <callback name="loaded">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="document" transfer-ownership="none">
              <type name="Document" c:type="XedDocument*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="save">
        <callback name="save">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="document" transfer-ownership="none">
              <type name="Document" c:type="XedDocument*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="saved">
        <callback name="saved">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="document" transfer-ownership="none">
              <type name="Document" c:type="XedDocument*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="EncodingsComboBox"
           c:symbol-prefix="encodings_combo_box"
           c:type="XedEncodingsComboBox"
           parent="Gtk.ComboBox"
           glib:type-name="XedEncodingsComboBox"
           glib:get-type="xed_encodings_combo_box_get_type"
           glib:type-struct="EncodingsComboBoxClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.CellEditable"/>
      <implements name="Gtk.CellLayout"/>
      <constructor name="new" c:identifier="xed_encodings_combo_box_new">
        <doc xml:space="preserve">Creates a new encodings combo box object. If @save_mode is %FALSE, it means
that the combo box is used for loading a content (e.g. a file), so the row
"Automatically Detected" is added. For saving a content, the encoding must be
provided.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a new #XedEncodingsComboBox object.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="save_mode" transfer-ownership="none">
            <doc xml:space="preserve">whether the combo box is used for saving a content.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_selected_encoding"
              c:identifier="xed_encodings_combo_box_get_selected_encoding">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the selected #GtkSourceEncoding, or %NULL if the encoding should be
auto-detected (only for loading mode, not for saving).</doc>
          <type name="GtkSource.Encoding" c:type="const GtkSourceEncoding*"/>
        </return-value>
        <parameters>
          <instance-parameter name="menu" transfer-ownership="none">
            <doc xml:space="preserve">a #XedEncodingsComboBox.</doc>
            <type name="EncodingsComboBox" c:type="XedEncodingsComboBox*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_selected_encoding"
              c:identifier="xed_encodings_combo_box_set_selected_encoding">
        <doc xml:space="preserve">Sets the selected encoding.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="menu" transfer-ownership="none">
            <doc xml:space="preserve">a #XedEncodingsComboBox</doc>
            <type name="EncodingsComboBox" c:type="XedEncodingsComboBox*"/>
          </instance-parameter>
          <parameter name="encoding" transfer-ownership="none">
            <doc xml:space="preserve">the #GtkSourceEncoding</doc>
            <type name="GtkSource.Encoding" c:type="const GtkSourceEncoding*"/>
          </parameter>
        </parameters>
      </method>
      <property name="save-mode"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent">
        <type name="Gtk.ComboBox" c:type="GtkComboBox"/>
      </field>
      <field name="priv">
        <type name="EncodingsComboBoxPrivate"
              c:type="XedEncodingsComboBoxPrivate*"/>
      </field>
    </class>
    <record name="EncodingsComboBoxClass"
            c:type="XedEncodingsComboBoxClass"
            glib:is-gtype-struct-for="EncodingsComboBox">
      <field name="parent_class">
        <type name="Gtk.ComboBoxClass" c:type="GtkComboBoxClass"/>
      </field>
    </record>
    <record name="EncodingsComboBoxPrivate"
            c:type="XedEncodingsComboBoxPrivate"
            disguised="1">
    </record>
    <class name="FileChooserDialog"
           c:symbol-prefix="file_chooser_dialog"
           c:type="XedFileChooserDialog"
           parent="Gtk.FileChooserDialog"
           glib:type-name="XedFileChooserDialog"
           glib:get-type="xed_file_chooser_dialog_get_type"
           glib:type-struct="FileChooserDialogClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.FileChooser"/>
      <constructor name="new"
                   c:identifier="xed_file_chooser_dialog_new"
                   introspectable="0">
        <doc xml:space="preserve">Creates a new #XedFileChooserDialog.  This function is analogous to
gtk_dialog_new_with_buttons().</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a new #XedFileChooserDialog</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="title"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">Title of the dialog, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="parent"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">Transient parent of the dialog, or %NULL</doc>
            <type name="Gtk.Window" c:type="GtkWindow*"/>
          </parameter>
          <parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve">Open or save mode for the dialog</doc>
            <type name="Gtk.FileChooserAction" c:type="GtkFileChooserAction"/>
          </parameter>
          <parameter name="encoding" transfer-ownership="none">
            <type name="GtkSource.Encoding" c:type="const GtkSourceEncoding*"/>
          </parameter>
          <parameter name="first_button_text"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">stock ID or text to go in
the first button, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..."
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">response ID for the first button, then
additional (button, id) pairs, ending with %NULL</doc>
            <varargs/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_encoding"
              c:identifier="xed_file_chooser_dialog_get_encoding">
        <return-value transfer-ownership="none">
          <type name="GtkSource.Encoding" c:type="const GtkSourceEncoding*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dialog" transfer-ownership="none">
            <type name="FileChooserDialog" c:type="XedFileChooserDialog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_newline_type"
              c:identifier="xed_file_chooser_dialog_get_newline_type">
        <return-value transfer-ownership="none">
          <type name="GtkSource.NewlineType" c:type="GtkSourceNewlineType"/>
        </return-value>
        <parameters>
          <instance-parameter name="dialog" transfer-ownership="none">
            <type name="FileChooserDialog" c:type="XedFileChooserDialog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_encoding"
              c:identifier="xed_file_chooser_dialog_set_encoding">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dialog" transfer-ownership="none">
            <type name="FileChooserDialog" c:type="XedFileChooserDialog*"/>
          </instance-parameter>
          <parameter name="encoding" transfer-ownership="none">
            <type name="GtkSource.Encoding" c:type="const GtkSourceEncoding*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_newline_type"
              c:identifier="xed_file_chooser_dialog_set_newline_type">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dialog" transfer-ownership="none">
            <type name="FileChooserDialog" c:type="XedFileChooserDialog*"/>
          </instance-parameter>
          <parameter name="newline_type" transfer-ownership="none">
            <type name="GtkSource.NewlineType" c:type="GtkSourceNewlineType"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="Gtk.FileChooserDialog" c:type="GtkFileChooserDialog"/>
      </field>
      <field name="priv">
        <type name="FileChooserDialogPrivate"
              c:type="XedFileChooserDialogPrivate*"/>
      </field>
    </class>
    <record name="FileChooserDialogClass"
            c:type="XedFileChooserDialogClass"
            glib:is-gtype-struct-for="FileChooserDialog">
      <field name="parent_class">
        <type name="Gtk.FileChooserDialogClass"
              c:type="GtkFileChooserDialogClass"/>
      </field>
    </record>
    <record name="FileChooserDialogPrivate"
            c:type="XedFileChooserDialogPrivate"
            disguised="1">
    </record>
    <constant name="METADATA_ATTRIBUTE_ENCODING"
              value="metadata::xed-encoding"
              c:type="XED_METADATA_ATTRIBUTE_ENCODING">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="METADATA_ATTRIBUTE_LANGUAGE"
              value="metadata::xed-language"
              c:type="XED_METADATA_ATTRIBUTE_LANGUAGE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="METADATA_ATTRIBUTE_POSITION"
              value="metadata::xed-position"
              c:type="XED_METADATA_ATTRIBUTE_POSITION">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="Message"
           c:symbol-prefix="message"
           c:type="XedMessage"
           parent="GObject.Object"
           glib:type-name="XedMessage"
           glib:get-type="xed_message_get_type"
           glib:type-struct="MessageClass">
      <method name="get" c:identifier="xed_message_get" introspectable="0">
        <doc xml:space="preserve">Get values of message arguments. The supplied @var_args should contain
pairs of keys and pointers to variables which are set to the argument
value for the specified key.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">the #XedMessage</doc>
            <type name="Message" c:type="XedMessage*"/>
          </instance-parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve">a %NULL variable argument list of key/value container pairs</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="get_key_type" c:identifier="xed_message_get_key_type">
        <doc xml:space="preserve">Get the type of a message argument.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the type of @key</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">the #XedMessage</doc>
            <type name="Message" c:type="XedMessage*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">the argument key</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_message_type"
              c:identifier="xed_message_get_message_type">
        <return-value transfer-ownership="none" nullable="1">
          <type name="gpointer" c:type="_XedMessageType"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <type name="Message" c:type="XedMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_method" c:identifier="xed_message_get_method">
        <doc xml:space="preserve">Get the message method.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the message method</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">the #XedMessage</doc>
            <type name="Message" c:type="XedMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_object_path"
              c:identifier="xed_message_get_object_path">
        <doc xml:space="preserve">Get the message object path.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the message object path</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">the #XedMessage</doc>
            <type name="Message" c:type="XedMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_valist"
              c:identifier="xed_message_get_valist"
              introspectable="0">
        <doc xml:space="preserve">Get values of message arguments. The supplied @var_args should contain
pairs of keys and pointers to variables which are set to the argument
value for the specified key.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">the #XedMessage</doc>
            <type name="Message" c:type="XedMessage*"/>
          </instance-parameter>
          <parameter name="var_args" transfer-ownership="none">
            <doc xml:space="preserve">a %NULL variable argument list of key/value container pairs</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value" c:identifier="xed_message_get_value">
        <doc xml:space="preserve">Get the value of a specific message argument. @value will be initialized
with the correct type.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">the #XedMessage</doc>
            <type name="Message" c:type="XedMessage*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">the argument key</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">value return container</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_key" c:identifier="xed_message_has_key">
        <doc xml:space="preserve">Check whether the message has a specific key.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @message has argument @key</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">the #XedMessage</doc>
            <type name="Message" c:type="XedMessage*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">the argument key</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set" c:identifier="xed_message_set" introspectable="0">
        <doc xml:space="preserve">Set values of message arguments. The supplied @var_args should contain
pairs of keys and argument values.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">the #XedMessage</doc>
            <type name="Message" c:type="XedMessage*"/>
          </instance-parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve">a %NULL terminated variable list of key/value pairs</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="set_valist"
              c:identifier="xed_message_set_valist"
              introspectable="0">
        <doc xml:space="preserve">Set values of message arguments. The supplied @var_args should contain
pairs of keys and argument values.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">the #XedMessage</doc>
            <type name="Message" c:type="XedMessage*"/>
          </instance-parameter>
          <parameter name="var_args" transfer-ownership="none">
            <doc xml:space="preserve">a %NULL terminated variable list of key/value pairs</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value" c:identifier="xed_message_set_value">
        <doc xml:space="preserve">Set value of message argument @key to @value.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">the #XedMessage</doc>
            <type name="Message" c:type="XedMessage*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">the argument key</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve">the argument value</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_valuesv" c:identifier="xed_message_set_valuesv">
        <doc xml:space="preserve">Set message argument values.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">the #XedMessage</doc>
            <type name="Message" c:type="XedMessage*"/>
          </instance-parameter>
          <parameter name="keys" transfer-ownership="none">
            <doc xml:space="preserve">keys to set values for</doc>
            <array length="2" zero-terminated="0" c:type="const gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="values" transfer-ownership="none">
            <doc xml:space="preserve">values to set</doc>
            <array length="2" zero-terminated="0" c:type="GValue*">
              <type name="GObject.Value" c:type="GValue"/>
            </array>
          </parameter>
          <parameter name="n_values" transfer-ownership="none">
            <doc xml:space="preserve">number of arguments to set values for</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="validate" c:identifier="xed_message_validate">
        <doc xml:space="preserve">Validates the message arguments according to the message type.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the message is valid</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">the #XedMessage</doc>
            <type name="Message" c:type="XedMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="method" transfer-ownership="none">
        <doc xml:space="preserve">The messages method.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="object-path" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="type"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="MessageType"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="MessagePrivate" c:type="XedMessagePrivate*"/>
      </field>
    </class>
    <class name="MessageBus"
           c:symbol-prefix="message_bus"
           c:type="XedMessageBus"
           parent="GObject.Object"
           glib:type-name="XedMessageBus"
           glib:get-type="xed_message_bus_get_type"
           glib:type-struct="MessageBusClass">
      <constructor name="new" c:identifier="xed_message_bus_new">
        <doc xml:space="preserve">Create a new message bus. Use xed_message_bus_get_default() to get the
default, application wide, message bus. Creating a new bus is useful for
associating a specific bus with for instance a #XedWindow.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new #XedMessageBus</doc>
          <type name="MessageBus" c:type="XedMessageBus*"/>
        </return-value>
      </constructor>
      <function name="get_default" c:identifier="xed_message_bus_get_default">
        <doc xml:space="preserve">Get the default application #XedMessageBus.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the default #XedMessageBus</doc>
          <type name="MessageBus" c:type="XedMessageBus*"/>
        </return-value>
      </function>
      <virtual-method name="dispatch">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bus" transfer-ownership="none">
            <type name="MessageBus" c:type="XedMessageBus*"/>
          </instance-parameter>
          <parameter name="message" transfer-ownership="none">
            <type name="Message" c:type="XedMessage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="registered">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bus" transfer-ownership="none">
            <type name="MessageBus" c:type="XedMessageBus*"/>
          </instance-parameter>
          <parameter name="message_type" transfer-ownership="none">
            <type name="MessageType" c:type="XedMessageType*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="unregistered">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bus" transfer-ownership="none">
            <type name="MessageBus" c:type="XedMessageBus*"/>
          </instance-parameter>
          <parameter name="message_type" transfer-ownership="none">
            <type name="MessageType" c:type="XedMessageType*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="block" c:identifier="xed_message_bus_block">
        <doc xml:space="preserve">Blocks evoking the callback specified by @id. Unblock the callback by
using xed_message_bus_unblock().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bus" transfer-ownership="none">
            <doc xml:space="preserve">a #XedMessageBus</doc>
            <type name="MessageBus" c:type="XedMessageBus*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">the callback id</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="block_by_func"
              c:identifier="xed_message_bus_block_by_func">
        <doc xml:space="preserve">Blocks evoking the callback that matches provided @callback and @userdata.
Unblock the callback using xed_message_unblock_by_func().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bus" transfer-ownership="none">
            <doc xml:space="preserve">a #XedMessageBus</doc>
            <type name="MessageBus" c:type="XedMessageBus*"/>
          </instance-parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">the object path</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="method" transfer-ownership="none">
            <doc xml:space="preserve">the method</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve">the callback to block</doc>
            <type name="MessageCallback" c:type="XedMessageCallback"/>
          </parameter>
          <parameter name="userdata"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the userdata with which the callback was connected</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect" c:identifier="xed_message_bus_connect">
        <doc xml:space="preserve">Connect a callback handler to be evoked when message @method at @object_path
is sent over the bus.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the callback identifier</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="bus" transfer-ownership="none">
            <doc xml:space="preserve">a #XedMessageBus</doc>
            <type name="MessageBus" c:type="XedMessageBus*"/>
          </instance-parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">the object path</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="method" transfer-ownership="none">
            <doc xml:space="preserve">the method</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="3"
                     destroy="4">
            <doc xml:space="preserve">function to be called when message @method at @object_path is sent</doc>
            <type name="MessageCallback" c:type="XedMessageCallback"/>
          </parameter>
          <parameter name="userdata"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">userdata to use for the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy_data"
                     transfer-ownership="none"
                     scope="async">
            <doc xml:space="preserve">function to evoke with @userdata as argument when @userdata
               needs to be freed</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="disconnect" c:identifier="xed_message_bus_disconnect">
        <doc xml:space="preserve">Disconnects a previously connected message callback.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bus" transfer-ownership="none">
            <doc xml:space="preserve">a #XedMessageBus</doc>
            <type name="MessageBus" c:type="XedMessageBus*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">the callback id as returned by xed_message_bus_connect()</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="disconnect_by_func"
              c:identifier="xed_message_bus_disconnect_by_func">
        <doc xml:space="preserve">Disconnects a previously connected message callback by matching the
provided callback function and userdata. See also
xed_message_bus_disconnect().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bus" transfer-ownership="none">
            <doc xml:space="preserve">a #XedMessageBus</doc>
            <type name="MessageBus" c:type="XedMessageBus*"/>
          </instance-parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">the object path</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="method" transfer-ownership="none">
            <doc xml:space="preserve">the method</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve">the connected callback</doc>
            <type name="MessageCallback" c:type="XedMessageCallback"/>
          </parameter>
          <parameter name="userdata"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the userdata with which the callback was connected</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="foreach" c:identifier="xed_message_bus_foreach">
        <doc xml:space="preserve">Calls @func for each message type registered on the bus</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bus" transfer-ownership="none">
            <doc xml:space="preserve">the #XedMessagebus</doc>
            <type name="MessageBus" c:type="XedMessageBus*"/>
          </instance-parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve">the callback function</doc>
            <type name="MessageBusForeach" c:type="XedMessageBusForeach"/>
          </parameter>
          <parameter name="userdata"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the user data to supply to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_registered"
              c:identifier="xed_message_bus_is_registered">
        <doc xml:space="preserve">Check whether a message type @method at @object_path is registered on the
bus.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the @method at @object_path is a registered message
              type on the bus</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="bus" transfer-ownership="none">
            <doc xml:space="preserve">a #XedMessageBus</doc>
            <type name="MessageBus" c:type="XedMessageBus*"/>
          </instance-parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">the object path</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="method" transfer-ownership="none">
            <doc xml:space="preserve">the method</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="lookup" c:identifier="xed_message_bus_lookup">
        <doc xml:space="preserve">Get the registered #XedMessageType for @method at @object_path. The
returned #XedMessageType is owned by the bus and should not be unreffed.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the registered #XedMessageType or %NULL if no message type
              is registered for @method at @object_path</doc>
          <type name="MessageType" c:type="XedMessageType*"/>
        </return-value>
        <parameters>
          <instance-parameter name="bus" transfer-ownership="none">
            <doc xml:space="preserve">a #XedMessageBus</doc>
            <type name="MessageBus" c:type="XedMessageBus*"/>
          </instance-parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">the object path</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="method" transfer-ownership="none">
            <doc xml:space="preserve">the method</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="register"
              c:identifier="xed_message_bus_register"
              introspectable="0">
        <doc xml:space="preserve">Register a message on the bus. A message must be registered on the bus before
it can be send. This function registers the type arguments for @method at
@object_path. The arguments are specified with the variable arguments which
should contain pairs of const gchar *key and GType terminated by %NULL. The
last @num_optional arguments are registered as optional (and are thus not
required when sending a message).

This function emits a #XedMessageBus::registered signal.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the registered #XedMessageType. The returned reference is
              owned by the bus. If you want to keep it alive after
              unregistering, use xed_message_type_ref().</doc>
          <type name="MessageType" c:type="XedMessageType*"/>
        </return-value>
        <parameters>
          <instance-parameter name="bus" transfer-ownership="none">
            <doc xml:space="preserve">a #XedMessageBus</doc>
            <type name="MessageBus" c:type="XedMessageBus*"/>
          </instance-parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">the object path</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="method" transfer-ownership="none">
            <doc xml:space="preserve">the method to register</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="num_optional" transfer-ownership="none">
            <doc xml:space="preserve">the number of optional arguments</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve">NULL terminated list of key/gtype method argument pairs</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="send"
              c:identifier="xed_message_bus_send"
              introspectable="0">
        <doc xml:space="preserve">This provides a convenient way to quickly send a message @method at
@object_path asynchronously over the bus. The variable argument list
specifies key (string) value pairs used to construct the message arguments.
To send a message synchronously use xed_message_bus_send_sync().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bus" transfer-ownership="none">
            <doc xml:space="preserve">a #XedMessageBus</doc>
            <type name="MessageBus" c:type="XedMessageBus*"/>
          </instance-parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">the object path</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="method" transfer-ownership="none">
            <doc xml:space="preserve">the method</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve">NULL terminated list of key/value pairs</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="send_message" c:identifier="xed_message_bus_send_message">
        <doc xml:space="preserve">This sends the provided @message asynchronously over the bus. To send
a message synchronously, use xed_message_bus_send_message_sync(). The
convenience function xed_message_bus_send() can be used to easily send
a message without constructing the message object explicitly first.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bus" transfer-ownership="none">
            <doc xml:space="preserve">a #XedMessageBus</doc>
            <type name="MessageBus" c:type="XedMessageBus*"/>
          </instance-parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">the message to send</doc>
            <type name="Message" c:type="XedMessage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_message_sync"
              c:identifier="xed_message_bus_send_message_sync">
        <doc xml:space="preserve">This sends the provided @message synchronously over the bus. To send
a message asynchronously, use xed_message_bus_send_message(). The
convenience function xed_message_bus_send_sync() can be used to easily send
a message without constructing the message object explicitly first.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bus" transfer-ownership="none">
            <doc xml:space="preserve">a #XedMessageBus</doc>
            <type name="MessageBus" c:type="XedMessageBus*"/>
          </instance-parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">the message to send</doc>
            <type name="Message" c:type="XedMessage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_sync"
              c:identifier="xed_message_bus_send_sync"
              introspectable="0">
        <doc xml:space="preserve">This provides a convenient way to quickly send a message @method at
@object_path synchronously over the bus. The variable argument list
specifies key (string) value pairs used to construct the message
arguments. To send a message asynchronously use xed_message_bus_send().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the constructed #XedMessage. The caller owns a reference
              to the #XedMessage and should call g_object_unref() when
              it is no longer needed</doc>
          <type name="Message" c:type="XedMessage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="bus" transfer-ownership="none">
            <doc xml:space="preserve">a #XedMessageBus</doc>
            <type name="MessageBus" c:type="XedMessageBus*"/>
          </instance-parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">the object path</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="method" transfer-ownership="none">
            <doc xml:space="preserve">the method</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve">NULL terminated list of key/value pairs</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="unblock" c:identifier="xed_message_bus_unblock">
        <doc xml:space="preserve">Unblocks the callback specified by @id.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bus" transfer-ownership="none">
            <doc xml:space="preserve">a #XedMessageBus</doc>
            <type name="MessageBus" c:type="XedMessageBus*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">the callback id</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="unblock_by_func"
              c:identifier="xed_message_bus_unblock_by_func">
        <doc xml:space="preserve">Unblocks the callback that matches provided @callback and @userdata.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bus" transfer-ownership="none">
            <doc xml:space="preserve">a #XedMessageBus</doc>
            <type name="MessageBus" c:type="XedMessageBus*"/>
          </instance-parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">the object path</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="method" transfer-ownership="none">
            <doc xml:space="preserve">the method</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve">the callback to block</doc>
            <type name="MessageCallback" c:type="XedMessageCallback"/>
          </parameter>
          <parameter name="userdata"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the userdata with which the callback was connected</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="unregister" c:identifier="xed_message_bus_unregister">
        <doc xml:space="preserve">Unregisters a previously registered message type. This is especially useful
for plugins which should unregister message types when they are deactivated.

This function emits the #XedMessageBus::unregistered signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bus" transfer-ownership="none">
            <doc xml:space="preserve">a #XedMessageBus</doc>
            <type name="MessageBus" c:type="XedMessageBus*"/>
          </instance-parameter>
          <parameter name="message_type" transfer-ownership="none">
            <doc xml:space="preserve">the #XedMessageType to unregister</doc>
            <type name="MessageType" c:type="XedMessageType*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unregister_all"
              c:identifier="xed_message_bus_unregister_all">
        <doc xml:space="preserve">Unregisters all message types for @object_path. This is especially useful for
plugins which should unregister message types when they are deactivated.

This function emits the #XedMessageBus::unregistered signal for all
unregistered message types.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bus" transfer-ownership="none">
            <doc xml:space="preserve">a #XedMessageBus</doc>
            <type name="MessageBus" c:type="XedMessageBus*"/>
          </instance-parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">the object path</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="MessageBusPrivate" c:type="XedMessageBusPrivate*"/>
      </field>
      <glib:signal name="dispatch" when="last">
        <doc xml:space="preserve">The "dispatch" signal is emitted when a message is to be dispatched.
The message is dispatched in the default handler of this signal.
Primary use of this signal is to customize the dispatch of a message
(for instance to automatically dispatch all messages over DBus).
2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve">the #XedMessage to dispatch</doc>
            <type name="Message"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="registered" when="last">
        <doc xml:space="preserve">The "registered" signal is emitted when a message has been registered
on the bus.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="message_type" transfer-ownership="none">
            <doc xml:space="preserve">the registered #XedMessageType</doc>
            <type name="MessageType"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="unregistered" when="last">
        <doc xml:space="preserve">The "unregistered" signal is emitted when a message has been
unregistered from the bus.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="message_type" transfer-ownership="none">
            <doc xml:space="preserve">the unregistered #XedMessageType</doc>
            <type name="MessageType"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="MessageBusClass"
            c:type="XedMessageBusClass"
            glib:is-gtype-struct-for="MessageBus">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="dispatch">
        <callback name="dispatch">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="bus" transfer-ownership="none">
              <type name="MessageBus" c:type="XedMessageBus*"/>
            </parameter>
            <parameter name="message" transfer-ownership="none">
              <type name="Message" c:type="XedMessage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="registered">
        <callback name="registered">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="bus" transfer-ownership="none">
              <type name="MessageBus" c:type="XedMessageBus*"/>
            </parameter>
            <parameter name="message_type" transfer-ownership="none">
              <type name="MessageType" c:type="XedMessageType*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unregistered">
        <callback name="unregistered">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="bus" transfer-ownership="none">
              <type name="MessageBus" c:type="XedMessageBus*"/>
            </parameter>
            <parameter name="message_type" transfer-ownership="none">
              <type name="MessageType" c:type="XedMessageType*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <callback name="MessageBusForeach" c:type="XedMessageBusForeach">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="message_type" transfer-ownership="none">
          <type name="MessageType" c:type="XedMessageType*"/>
        </parameter>
        <parameter name="userdata"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="MessageBusPrivate"
            c:type="XedMessageBusPrivate"
            disguised="1">
    </record>
    <callback name="MessageCallback" c:type="XedMessageCallback">
      <doc xml:space="preserve">Callback signature used for connecting callback functions to be called
when a message is received (see xed_message_bus_connect()).</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="bus" transfer-ownership="none">
          <doc xml:space="preserve">the #XedMessageBus on which the message was sent</doc>
          <type name="MessageBus" c:type="XedMessageBus*"/>
        </parameter>
        <parameter name="message" transfer-ownership="none">
          <doc xml:space="preserve">the #XedMessage which was sent</doc>
          <type name="Message" c:type="XedMessage*"/>
        </parameter>
        <parameter name="userdata"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">the supplied user data when connecting the callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="MessageClass"
            c:type="XedMessageClass"
            glib:is-gtype-struct-for="Message">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="MessagePrivate" c:type="XedMessagePrivate" disguised="1">
    </record>
    <record name="MessageType"
            c:type="XedMessageType"
            glib:type-name="XedMessageType"
            glib:get-type="xed_message_type_get_type"
            c:symbol-prefix="message_type">
      <constructor name="new"
                   c:identifier="xed_message_type_new"
                   introspectable="0">
        <doc xml:space="preserve">Create a new #XedMessageType for @method at @object_path. Argument names
and values are supplied by the NULL terminated variable argument list.
The last @num_optional provided arguments are considered optional.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly constructed #XedMessageType</doc>
          <type name="MessageType" c:type="XedMessageType*"/>
        </return-value>
        <parameters>
          <parameter name="object_path"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the object path</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="method"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the method</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="num_optional" transfer-ownership="none">
            <doc xml:space="preserve">number of optional arguments</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve">key/gtype pair variable argument list</doc>
            <varargs/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_valist"
                   c:identifier="xed_message_type_new_valist"
                   introspectable="0">
        <doc xml:space="preserve">Create a new #XedMessageType for @method at @object_path. Argument names
and values are supplied by the NULL terminated variable argument list.
The last @num_optional provided arguments are considered optional.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly constructed #XedMessageType</doc>
          <type name="MessageType" c:type="XedMessageType*"/>
        </return-value>
        <parameters>
          <parameter name="object_path"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the object path</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="method"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the method</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="num_optional" transfer-ownership="none">
            <doc xml:space="preserve">number of optional arguments</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="va_args" transfer-ownership="none">
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="foreach" c:identifier="xed_message_type_foreach">
        <doc xml:space="preserve">Calls @func for each argument in the message type.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="message_type" transfer-ownership="none">
            <doc xml:space="preserve">the #XedMessageType</doc>
            <type name="MessageType" c:type="XedMessageType*"/>
          </instance-parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve">the callback function</doc>
            <type name="MessageTypeForeach" c:type="XedMessageTypeForeach"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">user data supplied to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_method" c:identifier="xed_message_type_get_method">
        <doc xml:space="preserve">Get the message type method.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the message type method</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="message_type" transfer-ownership="none">
            <doc xml:space="preserve">the #XedMessageType</doc>
            <type name="MessageType" c:type="XedMessageType*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_object_path"
              c:identifier="xed_message_type_get_object_path">
        <doc xml:space="preserve">Get the message type object path.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the message type object path</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="message_type" transfer-ownership="none">
            <doc xml:space="preserve">the #XedMessageType</doc>
            <type name="MessageType" c:type="XedMessageType*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="instantiate"
              c:identifier="xed_message_type_instantiate"
              introspectable="0">
        <doc xml:space="preserve">Instantiate a new message from the message type with specific values
for the message arguments.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created message</doc>
          <type name="Message" c:type="XedMessage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="message_type" transfer-ownership="none">
            <doc xml:space="preserve">the #XedMessageType</doc>
            <type name="MessageType" c:type="XedMessageType*"/>
          </instance-parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve">NULL terminated variable list of key/value pairs</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="instantiate_valist"
              c:identifier="xed_message_type_instantiate_valist"
              introspectable="0">
        <doc xml:space="preserve">Instantiate a new message from the message type with specific values
for the message arguments.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the newly created message</doc>
          <type name="Message" c:type="XedMessage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="message_type" transfer-ownership="none">
            <doc xml:space="preserve">the #XedMessageType</doc>
            <type name="MessageType" c:type="XedMessageType*"/>
          </instance-parameter>
          <parameter name="va_args" transfer-ownership="none">
            <doc xml:space="preserve">NULL terminated variable list of key/value pairs</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </method>
      <method name="lookup" c:identifier="xed_message_type_lookup">
        <doc xml:space="preserve">Get the argument key #GType.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #GType of @key</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <instance-parameter name="message_type" transfer-ownership="none">
            <doc xml:space="preserve">the #XedMessageType</doc>
            <type name="MessageType" c:type="XedMessageType*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve">the argument key</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="xed_message_type_ref">
        <doc xml:space="preserve">Increases the reference count on @message_type.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">@message_type</doc>
          <type name="MessageType" c:type="XedMessageType*"/>
        </return-value>
        <parameters>
          <instance-parameter name="message_type" transfer-ownership="none">
            <doc xml:space="preserve">the #XedMessageType</doc>
            <type name="MessageType" c:type="XedMessageType*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set"
              c:identifier="xed_message_type_set"
              introspectable="0">
        <doc xml:space="preserve">Sets argument names/types supplied by the NULL terminated variable
argument list. The last @num_optional provided arguments are considered
optional.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="message_type" transfer-ownership="none">
            <doc xml:space="preserve">the #XedMessageType</doc>
            <type name="MessageType" c:type="XedMessageType*"/>
          </instance-parameter>
          <parameter name="num_optional" transfer-ownership="none">
            <doc xml:space="preserve">number of optional arguments</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve">key/gtype pair variable argument list</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="set_valist"
              c:identifier="xed_message_type_set_valist"
              introspectable="0">
        <doc xml:space="preserve">Sets argument names/types supplied by the NULL terminated variable
argument list @var_args. The last @num_optional provided arguments are
considered optional.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="message_type" transfer-ownership="none">
            <doc xml:space="preserve">the #XedMessageType</doc>
            <type name="MessageType" c:type="XedMessageType*"/>
          </instance-parameter>
          <parameter name="num_optional" transfer-ownership="none">
            <doc xml:space="preserve">number of optional arguments</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="va_args" transfer-ownership="none">
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="xed_message_type_unref">
        <doc xml:space="preserve">Decreases the reference count on @message_type. When the reference count
drops to 0, @message_type is destroyed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="message_type" transfer-ownership="none">
            <doc xml:space="preserve">the #XedMessageType</doc>
            <type name="MessageType" c:type="XedMessageType*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="identifier" c:identifier="xed_message_type_identifier">
        <doc xml:space="preserve">Get the string identifier for @method at @object_path.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the identifier for @method at @object_path</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="object_path"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the object path</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="method"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the method</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="is_supported"
                c:identifier="xed_message_type_is_supported">
        <doc xml:space="preserve">Returns if @type is #GType supported by the message system.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @type is a supported #GType</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">the #GType</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </function>
      <function name="is_valid_object_path"
                c:identifier="xed_message_type_is_valid_object_path">
        <doc xml:space="preserve">Returns whether @object_path is a valid object path</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @object_path is a valid object path</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object_path"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">the object path</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <callback name="MessageTypeForeach" c:type="XedMessageTypeForeach">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="key" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="type" transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="required" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="Notebook"
           c:symbol-prefix="notebook"
           c:type="XedNotebook"
           parent="Gtk.Notebook"
           glib:type-name="XedNotebook"
           glib:get-type="xed_notebook_get_type"
           glib:type-struct="NotebookClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="xed_notebook_new">
        <doc xml:space="preserve">Creates a new #XedNotebook object.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a new #XedNotebook</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <virtual-method name="tab_added">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="notebook" transfer-ownership="none">
            <type name="Notebook" c:type="XedNotebook*"/>
          </instance-parameter>
          <parameter name="tab" transfer-ownership="none">
            <type name="Tab" c:type="XedTab*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="tab_close_request">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="notebook" transfer-ownership="none">
            <type name="Notebook" c:type="XedNotebook*"/>
          </instance-parameter>
          <parameter name="tab" transfer-ownership="none">
            <type name="Tab" c:type="XedTab*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="tab_detached">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="notebook" transfer-ownership="none">
            <type name="Notebook" c:type="XedNotebook*"/>
          </instance-parameter>
          <parameter name="tab" transfer-ownership="none">
            <type name="Tab" c:type="XedTab*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="tab_removed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="notebook" transfer-ownership="none">
            <type name="Notebook" c:type="XedNotebook*"/>
          </instance-parameter>
          <parameter name="tab" transfer-ownership="none">
            <type name="Tab" c:type="XedTab*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="tabs_reordered">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="notebook" transfer-ownership="none">
            <type name="Notebook" c:type="XedNotebook*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="add_tab" c:identifier="xed_notebook_add_tab">
        <doc xml:space="preserve">Adds the specified @tab to the @nb.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="nb" transfer-ownership="none">
            <doc xml:space="preserve">a #XedNotebook</doc>
            <type name="Notebook" c:type="XedNotebook*"/>
          </instance-parameter>
          <parameter name="tab" transfer-ownership="none">
            <doc xml:space="preserve">a #XedTab</doc>
            <type name="Tab" c:type="XedTab*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve">the position where the @tab should be added</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="jump_to" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE to set the @tab as active</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_all_tabs"
              c:identifier="xed_notebook_get_all_tabs"
              introspectable="0">
        <return-value>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="nb" transfer-ownership="none">
            <type name="Notebook" c:type="XedNotebook*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_close_buttons_sensitive"
              c:identifier="xed_notebook_get_close_buttons_sensitive">
        <doc xml:space="preserve">Whether the close buttons are sensitive.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the close buttons are sensitive</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="nb" transfer-ownership="none">
            <doc xml:space="preserve">a #XedNotebook</doc>
            <type name="Notebook" c:type="XedNotebook*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tab_drag_and_drop_enabled"
              c:identifier="xed_notebook_get_tab_drag_and_drop_enabled">
        <doc xml:space="preserve">Whether the drag and drop is enabled in the @nb.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the drag and drop is enabled.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="nb" transfer-ownership="none">
            <doc xml:space="preserve">a #XedNotebook</doc>
            <type name="Notebook" c:type="XedNotebook*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tab_scrolling_enabled"
              c:identifier="xed_notebook_get_tab_scrolling_enabled">
        <doc xml:space="preserve">Whether notebook tab scrolling is enabled</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if tab scrolling is enabled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="nb" transfer-ownership="none">
            <doc xml:space="preserve">a #XedNotebook</doc>
            <type name="Notebook" c:type="XedNotebook*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="move_tab" c:identifier="xed_notebook_move_tab">
        <doc xml:space="preserve">Moves @tab from @src to @dest.
If dest_position is greater than or equal to the number of tabs
of the destination nootebook or negative, tab will be moved to the
end of the tabs.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve">a #XedNotebook</doc>
            <type name="Notebook" c:type="XedNotebook*"/>
          </instance-parameter>
          <parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve">a #XedNotebook</doc>
            <type name="Notebook" c:type="XedNotebook*"/>
          </parameter>
          <parameter name="tab" transfer-ownership="none">
            <doc xml:space="preserve">a #XedTab</doc>
            <type name="Tab" c:type="XedTab*"/>
          </parameter>
          <parameter name="dest_position" transfer-ownership="none">
            <doc xml:space="preserve">the position for @tab</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_all_tabs"
              c:identifier="xed_notebook_remove_all_tabs">
        <doc xml:space="preserve">Removes all #XedTab from @nb.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="nb" transfer-ownership="none">
            <doc xml:space="preserve">a #XedNotebook</doc>
            <type name="Notebook" c:type="XedNotebook*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_tab" c:identifier="xed_notebook_remove_tab">
        <doc xml:space="preserve">Removes @tab from @nb.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="nb" transfer-ownership="none">
            <doc xml:space="preserve">a #XedNotebook</doc>
            <type name="Notebook" c:type="XedNotebook*"/>
          </instance-parameter>
          <parameter name="tab" transfer-ownership="none">
            <doc xml:space="preserve">a #XedTab</doc>
            <type name="Tab" c:type="XedTab*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reorder_tab" c:identifier="xed_notebook_reorder_tab">
        <doc xml:space="preserve">Reorders the page containing @tab, so that it appears in @dest_position position.
If dest_position is greater than or equal to the number of tabs
of the destination notebook or negative, tab will be moved to the
end of the tabs.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="src" transfer-ownership="none">
            <doc xml:space="preserve">a #XedNotebook</doc>
            <type name="Notebook" c:type="XedNotebook*"/>
          </instance-parameter>
          <parameter name="tab" transfer-ownership="none">
            <doc xml:space="preserve">a #XedTab</doc>
            <type name="Tab" c:type="XedTab*"/>
          </parameter>
          <parameter name="dest_position" transfer-ownership="none">
            <doc xml:space="preserve">the position for @tab</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_close_buttons_sensitive"
              c:identifier="xed_notebook_set_close_buttons_sensitive">
        <doc xml:space="preserve">Sets whether the close buttons in the tabs of @nb are sensitive.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="nb" transfer-ownership="none">
            <doc xml:space="preserve">a #XedNotebook</doc>
            <type name="Notebook" c:type="XedNotebook*"/>
          </instance-parameter>
          <parameter name="sensitive" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE to make the buttons sensitive</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tab_drag_and_drop_enabled"
              c:identifier="xed_notebook_set_tab_drag_and_drop_enabled">
        <doc xml:space="preserve">Sets whether drag and drop of tabs in the @nb is enabled.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="nb" transfer-ownership="none">
            <doc xml:space="preserve">a #XedNotebook</doc>
            <type name="Notebook" c:type="XedNotebook*"/>
          </instance-parameter>
          <parameter name="enable" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE to enable the drag and drop</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tab_scrolling_enabled"
              c:identifier="xed_notebook_set_tab_scrolling_enabled">
        <doc xml:space="preserve">Sets whether tab scrolling in the @nb is enabled.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="nb" transfer-ownership="none">
            <doc xml:space="preserve">a #XedNotebook</doc>
            <type name="Notebook" c:type="XedNotebook*"/>
          </instance-parameter>
          <parameter name="enable" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE to enable tab scrolling</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <field name="notebook">
        <type name="Gtk.Notebook" c:type="GtkNotebook"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="NotebookPrivate" c:type="XedNotebookPrivate*"/>
      </field>
      <glib:signal name="tab-added" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Tab"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="tab-close-request" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Tab"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="tab-detached" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Tab"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="tab-removed" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Tab"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="tabs-reordered" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="NotebookClass"
            c:type="XedNotebookClass"
            glib:is-gtype-struct-for="Notebook">
      <field name="parent_class">
        <type name="Gtk.NotebookClass" c:type="GtkNotebookClass"/>
      </field>
      <field name="tab_added">
        <callback name="tab_added">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="notebook" transfer-ownership="none">
              <type name="Notebook" c:type="XedNotebook*"/>
            </parameter>
            <parameter name="tab" transfer-ownership="none">
              <type name="Tab" c:type="XedTab*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="tab_removed">
        <callback name="tab_removed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="notebook" transfer-ownership="none">
              <type name="Notebook" c:type="XedNotebook*"/>
            </parameter>
            <parameter name="tab" transfer-ownership="none">
              <type name="Tab" c:type="XedTab*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="tab_detached">
        <callback name="tab_detached">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="notebook" transfer-ownership="none">
              <type name="Notebook" c:type="XedNotebook*"/>
            </parameter>
            <parameter name="tab" transfer-ownership="none">
              <type name="Tab" c:type="XedTab*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="tabs_reordered">
        <callback name="tabs_reordered">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="notebook" transfer-ownership="none">
              <type name="Notebook" c:type="XedNotebook*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="tab_close_request">
        <callback name="tab_close_request">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="notebook" transfer-ownership="none">
              <type name="Notebook" c:type="XedNotebook*"/>
            </parameter>
            <parameter name="tab" transfer-ownership="none">
              <type name="Tab" c:type="XedTab*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="NotebookPrivate" c:type="XedNotebookPrivate" disguised="1">
    </record>
    <class name="Panel"
           c:symbol-prefix="panel"
           c:type="XedPanel"
           parent="Gtk.Bin"
           glib:type-name="XedPanel"
           glib:get-type="xed_panel_get_type"
           glib:type-struct="PanelClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="xed_panel_new">
        <doc xml:space="preserve">Creates a new #XedPanel with the given @orientation. You shouldn't create
a new panel use xed_window_get_side_panel() or xed_window_get_bottom_panel()
instead.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a new #XedPanel object.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="orientation" transfer-ownership="none">
            <doc xml:space="preserve">a #GtkOrientation</doc>
            <type name="Gtk.Orientation" c:type="GtkOrientation"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="close">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="panel" transfer-ownership="none">
            <type name="Panel" c:type="XedPanel*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="focus_document">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="panel" transfer-ownership="none">
            <type name="Panel" c:type="XedPanel*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="item_added">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="panel" transfer-ownership="none">
            <type name="Panel" c:type="XedPanel*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="item_removed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="panel" transfer-ownership="none">
            <type name="Panel" c:type="XedPanel*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="activate_item" c:identifier="xed_panel_activate_item">
        <doc xml:space="preserve">Switches to the page that contains @item.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if it was activated</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="panel" transfer-ownership="none">
            <doc xml:space="preserve">a #XedPanel</doc>
            <type name="Panel" c:type="XedPanel*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">the item to be activated</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_item" c:identifier="xed_panel_add_item">
        <doc xml:space="preserve">Adds a new item to the @panel.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="panel" transfer-ownership="none">
            <doc xml:space="preserve">a #XedPanel</doc>
            <type name="Panel" c:type="XedPanel*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">the #GtkWidget to add to the @panel</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">the name to be shown in the @panel</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="icon_name" transfer-ownership="none">
            <doc xml:space="preserve">the name of the icon to be shown in the @panel</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_n_items" c:identifier="xed_panel_get_n_items">
        <doc xml:space="preserve">Gets the number of items in a @panel.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the number of items contained in #XedPanel</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="panel" transfer-ownership="none">
            <doc xml:space="preserve">a #XedPanel</doc>
            <type name="Panel" c:type="XedPanel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_orientation" c:identifier="xed_panel_get_orientation">
        <doc xml:space="preserve">Gets the orientation of the @panel.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #GtkOrientation of #XedPanel</doc>
          <type name="Gtk.Orientation" c:type="GtkOrientation"/>
        </return-value>
        <parameters>
          <instance-parameter name="panel" transfer-ownership="none">
            <doc xml:space="preserve">a #XedPanel</doc>
            <type name="Panel" c:type="XedPanel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="item_is_active" c:identifier="xed_panel_item_is_active">
        <doc xml:space="preserve">Returns whether @item is the active widget in @panel</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if @item is the active widget</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="panel" transfer-ownership="none">
            <doc xml:space="preserve">a #XedPanel</doc>
            <type name="Panel" c:type="XedPanel*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">a #GtkWidget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_item" c:identifier="xed_panel_remove_item">
        <doc xml:space="preserve">Removes the widget @item from the panel if it is in the @panel and returns
%TRUE if there was not any problem.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if it was well removed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="panel" transfer-ownership="none">
            <doc xml:space="preserve">a #XedPanel</doc>
            <type name="Panel" c:type="XedPanel*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">the item to be removed from the panel</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <property name="orientation"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Gtk.Orientation"/>
      </property>
      <field name="parent">
        <type name="Gtk.Bin" c:type="GtkBin"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="PanelPrivate" c:type="XedPanelPrivate*"/>
      </field>
      <glib:signal name="close" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="focus-document" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="item-added" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gtk.Widget"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="item-removed" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gtk.Widget"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="PanelClass"
            c:type="XedPanelClass"
            glib:is-gtype-struct-for="Panel">
      <field name="parent_class">
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
      <field name="item_added">
        <callback name="item_added">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="panel" transfer-ownership="none">
              <type name="Panel" c:type="XedPanel*"/>
            </parameter>
            <parameter name="item" transfer-ownership="none">
              <type name="Gtk.Widget" c:type="GtkWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="item_removed">
        <callback name="item_removed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="panel" transfer-ownership="none">
              <type name="Panel" c:type="XedPanel*"/>
            </parameter>
            <parameter name="item" transfer-ownership="none">
              <type name="Gtk.Widget" c:type="GtkWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="close">
        <callback name="close">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="panel" transfer-ownership="none">
              <type name="Panel" c:type="XedPanel*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="focus_document">
        <callback name="focus_document">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="panel" transfer-ownership="none">
              <type name="Panel" c:type="XedPanel*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_xed_reserved1" introspectable="0">
        <callback name="_xed_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_xed_reserved2" introspectable="0">
        <callback name="_xed_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_xed_reserved3" introspectable="0">
        <callback name="_xed_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_xed_reserved4" introspectable="0">
        <callback name="_xed_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <record name="PanelPrivate" c:type="XedPanelPrivate" disguised="1">
    </record>
    <class name="ProgressInfoBar"
           c:symbol-prefix="progress_info_bar"
           c:type="XedProgressInfoBar"
           parent="Gtk.InfoBar"
           glib:type-name="XedProgressInfoBar"
           glib:get-type="xed_progress_info_bar_get_type"
           glib:type-struct="ProgressInfoBarClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="xed_progress_info_bar_new">
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="icon_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="markup" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="has_cancel" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="pulse" c:identifier="xed_progress_info_bar_pulse">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="area" transfer-ownership="none">
            <type name="ProgressInfoBar" c:type="XedProgressInfoBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_fraction"
              c:identifier="xed_progress_info_bar_set_fraction">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="area" transfer-ownership="none">
            <type name="ProgressInfoBar" c:type="XedProgressInfoBar*"/>
          </instance-parameter>
          <parameter name="fraction" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_name"
              c:identifier="xed_progress_info_bar_set_icon_name">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="area" transfer-ownership="none">
            <type name="ProgressInfoBar" c:type="XedProgressInfoBar*"/>
          </instance-parameter>
          <parameter name="icon_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_markup"
              c:identifier="xed_progress_info_bar_set_markup">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="area" transfer-ownership="none">
            <type name="ProgressInfoBar" c:type="XedProgressInfoBar*"/>
          </instance-parameter>
          <parameter name="markup" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_text" c:identifier="xed_progress_info_bar_set_text">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="area" transfer-ownership="none">
            <type name="ProgressInfoBar" c:type="XedProgressInfoBar*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="has-cancel-button"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent">
        <type name="Gtk.InfoBar" c:type="GtkInfoBar"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ProgressInfoBarPrivate"
              c:type="XedProgressInfoBarPrivate*"/>
      </field>
    </class>
    <record name="ProgressInfoBarClass"
            c:type="XedProgressInfoBarClass"
            glib:is-gtype-struct-for="ProgressInfoBar">
      <field name="parent_class">
        <type name="Gtk.InfoBarClass" c:type="GtkInfoBarClass"/>
      </field>
    </record>
    <record name="ProgressInfoBarPrivate"
            c:type="XedProgressInfoBarPrivate"
            disguised="1">
    </record>
    <enumeration name="SearchMode"
                 glib:type-name="XedSearchMode"
                 glib:get-type="xed_search_mode_get_type"
                 c:type="XedSearchMode">
      <member name="search"
              value="0"
              c:identifier="XED_SEARCH_MODE_SEARCH"
              glib:nick="search">
      </member>
      <member name="replace"
              value="1"
              c:identifier="XED_SEARCH_MODE_REPLACE"
              glib:nick="replace">
      </member>
    </enumeration>
    <class name="Searchbar"
           c:symbol-prefix="searchbar"
           c:type="XedSearchbar"
           parent="Gtk.Box"
           glib:type-name="XedSearchbar"
           glib:get-type="xed_searchbar_get_type"
           glib:type-struct="SearchbarClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="xed_searchbar_new">
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="parent" transfer-ownership="none">
            <type name="Gtk.Window" c:type="GtkWindow*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="show_replace">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dlg" transfer-ownership="none">
            <type name="Searchbar" c:type="XedSearchbar*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="find_again" c:identifier="xed_searchbar_find_again">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="searchbar" transfer-ownership="none">
            <type name="Searchbar" c:type="XedSearchbar*"/>
          </instance-parameter>
          <parameter name="backward" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_backwards" c:identifier="xed_searchbar_get_backwards">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="searchbar" transfer-ownership="none">
            <type name="Searchbar" c:type="XedSearchbar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parse_escapes"
              c:identifier="xed_searchbar_get_parse_escapes">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="searchbar" transfer-ownership="none">
            <type name="Searchbar" c:type="XedSearchbar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_replace_text"
              c:identifier="xed_searchbar_get_replace_text">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="searchbar" transfer-ownership="none">
            <type name="Searchbar" c:type="XedSearchbar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_search_settings"
              c:identifier="xed_searchbar_get_search_settings"
              introspectable="0">
        <return-value>
          <type name="GtkSource.SearchSettings"
                c:type="GtkSourceSearchSettings*"/>
        </return-value>
        <parameters>
          <instance-parameter name="searchbar" transfer-ownership="none">
            <type name="Searchbar" c:type="XedSearchbar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_search_text"
              c:identifier="xed_searchbar_get_search_text">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="searchbar" transfer-ownership="none">
            <type name="Searchbar" c:type="XedSearchbar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="hide" c:identifier="xed_searchbar_hide">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="searchbar" transfer-ownership="none">
            <type name="Searchbar" c:type="XedSearchbar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_parse_escapes"
              c:identifier="xed_searchbar_set_parse_escapes">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="searchbar" transfer-ownership="none">
            <type name="Searchbar" c:type="XedSearchbar*"/>
          </instance-parameter>
          <parameter name="parse_escapes" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_search_text"
              c:identifier="xed_searchbar_set_search_text">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="searchbar" transfer-ownership="none">
            <type name="Searchbar" c:type="XedSearchbar*"/>
          </instance-parameter>
          <parameter name="search_text" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="show" c:identifier="xed_searchbar_show">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="searchbar" transfer-ownership="none">
            <type name="Searchbar" c:type="XedSearchbar*"/>
          </instance-parameter>
          <parameter name="search_mode" transfer-ownership="none">
            <type name="SearchMode" c:type="XedSearchMode"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Gtk.Box" c:type="GtkBox"/>
      </field>
      <field name="window">
        <type name="Window" c:type="XedWindow*"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SearchbarPrivate" c:type="XedSearchbarPrivate*"/>
      </field>
    </class>
    <record name="SearchbarClass"
            c:type="XedSearchbarClass"
            glib:is-gtype-struct-for="Searchbar">
      <field name="parent_class">
        <type name="Gtk.BoxClass" c:type="GtkBoxClass"/>
      </field>
      <field name="show_replace">
        <callback name="show_replace">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="dlg" transfer-ownership="none">
              <type name="Searchbar" c:type="XedSearchbar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="SearchbarPrivate" c:type="XedSearchbarPrivate" disguised="1">
    </record>
    <class name="Statusbar"
           c:symbol-prefix="statusbar"
           c:type="XedStatusbar"
           parent="Gtk.Statusbar"
           glib:type-name="XedStatusbar"
           glib:get-type="xed_statusbar_get_type"
           glib:type-struct="StatusbarClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="xed_statusbar_new">
        <doc xml:space="preserve">Creates a new #XedStatusbar.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the new #XedStatusbar object</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="clear_overwrite"
              c:identifier="xed_statusbar_clear_overwrite">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="statusbar" transfer-ownership="none">
            <type name="Statusbar" c:type="XedStatusbar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="flash_message"
              c:identifier="xed_statusbar_flash_message"
              introspectable="0">
        <doc xml:space="preserve">Flash a temporary message on the statusbar.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="statusbar" transfer-ownership="none">
            <doc xml:space="preserve">a #XedStatusbar</doc>
            <type name="Statusbar" c:type="XedStatusbar*"/>
          </instance-parameter>
          <parameter name="context_id" transfer-ownership="none">
            <doc xml:space="preserve">message context_id</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve">message to flash on the statusbar</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="set_cursor_position"
              c:identifier="xed_statusbar_set_cursor_position">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="statusbar" transfer-ownership="none">
            <type name="Statusbar" c:type="XedStatusbar*"/>
          </instance-parameter>
          <parameter name="line" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="col" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_overwrite" c:identifier="xed_statusbar_set_overwrite">
        <doc xml:space="preserve">Sets the overwrite mode on the statusbar.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="statusbar" transfer-ownership="none">
            <doc xml:space="preserve">a #XedStatusbar</doc>
            <type name="Statusbar" c:type="XedStatusbar*"/>
          </instance-parameter>
          <parameter name="overwrite" transfer-ownership="none">
            <doc xml:space="preserve">if the overwrite mode is set</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_window_state"
              c:identifier="xed_statusbar_set_window_state">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="statusbar" transfer-ownership="none">
            <type name="Statusbar" c:type="XedStatusbar*"/>
          </instance-parameter>
          <parameter name="state" transfer-ownership="none">
            <type name="WindowState" c:type="XedWindowState"/>
          </parameter>
          <parameter name="num_of_errors" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Gtk.Statusbar" c:type="GtkStatusbar"/>
      </field>
      <field name="priv">
        <type name="StatusbarPrivate" c:type="XedStatusbarPrivate*"/>
      </field>
    </class>
    <record name="StatusbarClass"
            c:type="XedStatusbarClass"
            glib:is-gtype-struct-for="Statusbar">
      <field name="parent_class">
        <type name="Gtk.StatusbarClass" c:type="GtkStatusbarClass"/>
      </field>
    </record>
    <record name="StatusbarPrivate" c:type="XedStatusbarPrivate" disguised="1">
    </record>
    <class name="Tab"
           c:symbol-prefix="tab"
           c:type="XedTab"
           parent="Gtk.Box"
           glib:type-name="XedTab"
           glib:get-type="xed_tab_get_type"
           glib:type-struct="TabClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <function name="get_from_document"
                c:identifier="xed_tab_get_from_document">
        <doc xml:space="preserve">Gets the #XedTab associated with @doc.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #XedTab associated with @doc</doc>
          <type name="Tab" c:type="XedTab*"/>
        </return-value>
        <parameters>
          <parameter name="doc" transfer-ownership="none">
            <doc xml:space="preserve">a #XedDocument</doc>
            <type name="Document" c:type="XedDocument*"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_auto_save_enabled"
              c:identifier="xed_tab_get_auto_save_enabled">
        <doc xml:space="preserve">Gets the current state for the autosave feature</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the autosave is enabled, else %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab" transfer-ownership="none">
            <doc xml:space="preserve">a #XedTab</doc>
            <type name="Tab" c:type="XedTab*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_auto_save_interval"
              c:identifier="xed_tab_get_auto_save_interval">
        <doc xml:space="preserve">Gets the current interval for the autosaves</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value of the autosave</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab" transfer-ownership="none">
            <doc xml:space="preserve">a #XedTab</doc>
            <type name="Tab" c:type="XedTab*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_document" c:identifier="xed_tab_get_document">
        <doc xml:space="preserve">Gets the #XedDocument associated to @tab.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #XedDocument associated to @tab</doc>
          <type name="Document" c:type="XedDocument*"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab" transfer-ownership="none">
            <doc xml:space="preserve">a #XedTab</doc>
            <type name="Tab" c:type="XedTab*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state" c:identifier="xed_tab_get_state">
        <doc xml:space="preserve">Gets the #XedTabState of @tab.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #XedTabState of @tab</doc>
          <type name="TabState" c:type="XedTabState"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab" transfer-ownership="none">
            <doc xml:space="preserve">a #XedTab</doc>
            <type name="Tab" c:type="XedTab*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_view" c:identifier="xed_tab_get_view">
        <doc xml:space="preserve">Gets the #XedView inside @tab.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #XedView inside @tab</doc>
          <type name="View" c:type="XedView*"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab" transfer-ownership="none">
            <doc xml:space="preserve">a #XedTab</doc>
            <type name="Tab" c:type="XedTab*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_auto_save_enabled"
              c:identifier="xed_tab_set_auto_save_enabled">
        <doc xml:space="preserve">Enables or disables the autosave feature. It does not install an
autosave timeout if the document is new or is read-only</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab" transfer-ownership="none">
            <doc xml:space="preserve">a #XedTab</doc>
            <type name="Tab" c:type="XedTab*"/>
          </instance-parameter>
          <parameter name="enable" transfer-ownership="none">
            <doc xml:space="preserve">enable (%TRUE) or disable (%FALSE) auto save</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_auto_save_interval"
              c:identifier="xed_tab_set_auto_save_interval">
        <doc xml:space="preserve">Sets the interval for the autosave feature.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab" transfer-ownership="none">
            <doc xml:space="preserve">a #XedTab</doc>
            <type name="Tab" c:type="XedTab*"/>
          </instance-parameter>
          <parameter name="interval" transfer-ownership="none">
            <doc xml:space="preserve">the new interval</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_info_bar" c:identifier="xed_tab_set_info_bar">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tab" transfer-ownership="none">
            <type name="Tab" c:type="XedTab*"/>
          </instance-parameter>
          <parameter name="info_bar" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <property name="autosave" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="autosave-interval"
                writable="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="can-close" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="name" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="state" transfer-ownership="none">
        <type name="TabState"/>
      </property>
      <field name="vbox">
        <type name="Gtk.Box" c:type="GtkBox"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="TabPrivate" c:type="XedTabPrivate*"/>
      </field>
    </class>
    <record name="TabClass"
            c:type="XedTabClass"
            glib:is-gtype-struct-for="Tab">
      <field name="parent_class">
        <type name="Gtk.BoxClass" c:type="GtkBoxClass"/>
      </field>
    </record>
    <record name="TabPrivate" c:type="XedTabPrivate" disguised="1">
    </record>
    <enumeration name="TabState"
                 glib:type-name="XedTabState"
                 glib:get-type="xed_tab_state_get_type"
                 c:type="XedTabState">
      <member name="state_normal"
              value="0"
              c:identifier="XED_TAB_STATE_NORMAL"
              glib:nick="state-normal">
      </member>
      <member name="state_loading"
              value="1"
              c:identifier="XED_TAB_STATE_LOADING"
              glib:nick="state-loading">
      </member>
      <member name="state_reverting"
              value="2"
              c:identifier="XED_TAB_STATE_REVERTING"
              glib:nick="state-reverting">
      </member>
      <member name="state_saving"
              value="3"
              c:identifier="XED_TAB_STATE_SAVING"
              glib:nick="state-saving">
      </member>
      <member name="state_printing"
              value="4"
              c:identifier="XED_TAB_STATE_PRINTING"
              glib:nick="state-printing">
      </member>
      <member name="state_print_previewing"
              value="5"
              c:identifier="XED_TAB_STATE_PRINT_PREVIEWING"
              glib:nick="state-print-previewing">
      </member>
      <member name="state_showing_print_preview"
              value="6"
              c:identifier="XED_TAB_STATE_SHOWING_PRINT_PREVIEW"
              glib:nick="state-showing-print-preview">
      </member>
      <member name="state_generic_not_editable"
              value="7"
              c:identifier="XED_TAB_STATE_GENERIC_NOT_EDITABLE"
              glib:nick="state-generic-not-editable">
      </member>
      <member name="state_loading_error"
              value="8"
              c:identifier="XED_TAB_STATE_LOADING_ERROR"
              glib:nick="state-loading-error">
      </member>
      <member name="state_reverting_error"
              value="9"
              c:identifier="XED_TAB_STATE_REVERTING_ERROR"
              glib:nick="state-reverting-error">
      </member>
      <member name="state_saving_error"
              value="10"
              c:identifier="XED_TAB_STATE_SAVING_ERROR"
              glib:nick="state-saving-error">
      </member>
      <member name="state_generic_error"
              value="11"
              c:identifier="XED_TAB_STATE_GENERIC_ERROR"
              glib:nick="state-generic-error">
      </member>
      <member name="state_closing"
              value="12"
              c:identifier="XED_TAB_STATE_CLOSING"
              glib:nick="state-closing">
      </member>
      <member name="state_externally_modified_notification"
              value="13"
              c:identifier="XED_TAB_STATE_EXTERNALLY_MODIFIED_NOTIFICATION"
              glib:nick="state-externally-modified-notification">
      </member>
      <member name="num_of_states"
              value="14"
              c:identifier="XED_TAB_NUM_OF_STATES"
              glib:nick="num-of-states">
      </member>
    </enumeration>
    <class name="View"
           c:symbol-prefix="view"
           c:type="XedView"
           parent="GtkSource.View"
           glib:type-name="XedView"
           glib:get-type="xed_view_get_type"
           glib:type-struct="ViewClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Scrollable"/>
      <constructor name="new" c:identifier="xed_view_new">
        <doc xml:space="preserve">Creates a new #XedView object displaying the @doc document.
@doc cannot be %NULL.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a new #XedView</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="doc" transfer-ownership="none">
            <doc xml:space="preserve">a #XedDocument</doc>
            <type name="Document" c:type="XedDocument*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="drop_uris">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <type name="View" c:type="XedView*"/>
          </instance-parameter>
          <parameter name="uri_list" transfer-ownership="none">
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="copy_clipboard" c:identifier="xed_view_copy_clipboard">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <type name="View" c:type="XedView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="cut_clipboard" c:identifier="xed_view_cut_clipboard">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <type name="View" c:type="XedView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="delete_selection" c:identifier="xed_view_delete_selection">
        <doc xml:space="preserve">Deletes the text currently selected in the #GtkTextBuffer associated
to the view and scroll to the cursor position.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve">a #XedView</doc>
            <type name="View" c:type="XedView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="paste_clipboard" c:identifier="xed_view_paste_clipboard">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <type name="View" c:type="XedView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="scroll_to_cursor" c:identifier="xed_view_scroll_to_cursor">
        <doc xml:space="preserve">Scrolls the @view to the cursor position.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve">a #XedView</doc>
            <type name="View" c:type="XedView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="select_all" c:identifier="xed_view_select_all">
        <doc xml:space="preserve">Selects all the text displayed in the @view.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve">a #XedView</doc>
            <type name="View" c:type="XedView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_font" c:identifier="xed_view_set_font">
        <doc xml:space="preserve">If @def is #TRUE, resets the font of the @view to the default font
otherwise sets it to @font_name.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="view" transfer-ownership="none">
            <doc xml:space="preserve">a #XedView</doc>
            <type name="View" c:type="XedView*"/>
          </instance-parameter>
          <parameter name="def" transfer-ownership="none">
            <doc xml:space="preserve">whether to reset the default font</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="font_name" transfer-ownership="none">
            <doc xml:space="preserve">the name of the font to use</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="view">
        <type name="GtkSource.View" c:type="GtkSourceView"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ViewPrivate" c:type="XedViewPrivate*"/>
      </field>
      <glib:signal name="drop-uris" when="last" action="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <array>
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <interface name="ViewActivatable"
               c:symbol-prefix="view_activatable"
               c:type="XedViewActivatable"
               glib:type-name="XedViewActivatable"
               glib:get-type="xed_view_activatable_get_type"
               glib:type-struct="ViewActivatableInterface">
      <virtual-method name="activate" invoker="activate">
        <doc xml:space="preserve">Activates the extension on the window property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="activatable" transfer-ownership="none">
            <doc xml:space="preserve">A #XedViewActivatable.</doc>
            <type name="ViewActivatable" c:type="XedViewActivatable*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="deactivate" invoker="deactivate">
        <doc xml:space="preserve">Deactivates the extension on the window property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="activatable" transfer-ownership="none">
            <doc xml:space="preserve">A #XedViewActivatable.</doc>
            <type name="ViewActivatable" c:type="XedViewActivatable*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="activate" c:identifier="xed_view_activatable_activate">
        <doc xml:space="preserve">Activates the extension on the window property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="activatable" transfer-ownership="none">
            <doc xml:space="preserve">A #XedViewActivatable.</doc>
            <type name="ViewActivatable" c:type="XedViewActivatable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="deactivate" c:identifier="xed_view_activatable_deactivate">
        <doc xml:space="preserve">Deactivates the extension on the window property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="activatable" transfer-ownership="none">
            <doc xml:space="preserve">A #XedViewActivatable.</doc>
            <type name="ViewActivatable" c:type="XedViewActivatable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="view"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The window property contains the xed window for this
#XedViewActivatable instance.</doc>
        <type name="View"/>
      </property>
    </interface>
    <record name="ViewActivatableInterface"
            c:type="XedViewActivatableInterface"
            glib:is-gtype-struct-for="ViewActivatable">
      <field name="g_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="activate">
        <callback name="activate">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="activatable" transfer-ownership="none">
              <doc xml:space="preserve">A #XedViewActivatable.</doc>
              <type name="ViewActivatable" c:type="XedViewActivatable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="deactivate">
        <callback name="deactivate">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="activatable" transfer-ownership="none">
              <doc xml:space="preserve">A #XedViewActivatable.</doc>
              <type name="ViewActivatable" c:type="XedViewActivatable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="ViewClass"
            c:type="XedViewClass"
            glib:is-gtype-struct-for="View">
      <field name="parent_class">
        <type name="GtkSource.ViewClass" c:type="GtkSourceViewClass"/>
      </field>
      <field name="drop_uris">
        <callback name="drop_uris">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="view" transfer-ownership="none">
              <type name="View" c:type="XedView*"/>
            </parameter>
            <parameter name="uri_list" transfer-ownership="none">
              <type name="utf8" c:type="gchar**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="ViewPrivate" c:type="XedViewPrivate" disguised="1">
    </record>
    <class name="Window"
           c:symbol-prefix="window"
           c:type="XedWindow"
           parent="Gtk.ApplicationWindow"
           glib:type-name="XedWindow"
           glib:get-type="xed_window_get_type"
           glib:type-struct="WindowClass">
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gio.ActionGroup"/>
      <implements name="Gio.ActionMap"/>
      <implements name="Gtk.Buildable"/>
      <virtual-method name="active_tab_changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <type name="Window" c:type="XedWindow*"/>
          </instance-parameter>
          <parameter name="tab" transfer-ownership="none">
            <type name="Tab" c:type="XedTab*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="active_tab_state_changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <type name="Window" c:type="XedWindow*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="tab_added">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <type name="Window" c:type="XedWindow*"/>
          </instance-parameter>
          <parameter name="tab" transfer-ownership="none">
            <type name="Tab" c:type="XedTab*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="tab_removed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <type name="Window" c:type="XedWindow*"/>
          </instance-parameter>
          <parameter name="tab" transfer-ownership="none">
            <type name="Tab" c:type="XedTab*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="tabs_reordered">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <type name="Window" c:type="XedWindow*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="close_all_tabs" c:identifier="xed_window_close_all_tabs">
        <doc xml:space="preserve">Closes all opened tabs.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #XedWindow</doc>
            <type name="Window" c:type="XedWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="close_tab" c:identifier="xed_window_close_tab">
        <doc xml:space="preserve">Closes the @tab.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #XedWindow</doc>
            <type name="Window" c:type="XedWindow*"/>
          </instance-parameter>
          <parameter name="tab" transfer-ownership="none">
            <doc xml:space="preserve">the #XedTab to close</doc>
            <type name="Tab" c:type="XedTab*"/>
          </parameter>
        </parameters>
      </method>
      <method name="close_tabs" c:identifier="xed_window_close_tabs">
        <doc xml:space="preserve">Closes all tabs specified by @tabs.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #XedWindow</doc>
            <type name="Window" c:type="XedWindow*"/>
          </instance-parameter>
          <parameter name="tabs" transfer-ownership="none">
            <doc xml:space="preserve">a list of #XedTab</doc>
            <type name="GLib.List" c:type="const GList*">
              <type name="Tab"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="create_tab" c:identifier="xed_window_create_tab">
        <doc xml:space="preserve">Creates a new #XedTab and adds the new tab to the #XedNotebook.
In case @jump_to is %TRUE the #XedNotebook switches to that new #XedTab.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a new #XedTab</doc>
          <type name="Tab" c:type="XedTab*"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #XedWindow</doc>
            <type name="Window" c:type="XedWindow*"/>
          </instance-parameter>
          <parameter name="jump_to" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE to set the new #XedTab as active</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_tab_from_location"
              c:identifier="xed_window_create_tab_from_location">
        <doc xml:space="preserve">Creates a new #XedTab loading the document specified by @uri.
In case @jump_to is %TRUE the #XedNotebook swithes to that new #XedTab.
Whether @create is %TRUE, creates a new empty document if location does
not refer to an existing file</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">a new #XedTab</doc>
          <type name="Tab" c:type="XedTab*"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #XedWindow</doc>
            <type name="Window" c:type="XedWindow*"/>
          </instance-parameter>
          <parameter name="location" transfer-ownership="none">
            <doc xml:space="preserve">the location of the document</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="encoding"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GtkSourceEncoding</doc>
            <type name="GtkSource.Encoding" c:type="const GtkSourceEncoding*"/>
          </parameter>
          <parameter name="line_pos" transfer-ownership="none">
            <doc xml:space="preserve">the line position to visualize</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="create" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE to create a new document in case @uri does exist</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="jump_to" transfer-ownership="none">
            <doc xml:space="preserve">%TRUE to set the new #XedTab as active</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_tab_from_stream"
              c:identifier="xed_window_create_tab_from_stream"
              introspectable="0">
        <return-value>
          <type name="Tab" c:type="XedTab*"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <type name="Window" c:type="XedWindow*"/>
          </instance-parameter>
          <parameter name="stream" transfer-ownership="none">
            <type name="Gio.InputStream" c:type="GInputStream*"/>
          </parameter>
          <parameter name="encoding" transfer-ownership="none">
            <type name="GtkSource.Encoding" c:type="const GtkSourceEncoding*"/>
          </parameter>
          <parameter name="line_pos" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="jump_to" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_active_document"
              c:identifier="xed_window_get_active_document">
        <doc xml:space="preserve">Gets the active #XedDocument.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the active #XedDocument</doc>
          <type name="Document" c:type="XedDocument*"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #XedWindow</doc>
            <type name="Window" c:type="XedWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_active_tab" c:identifier="xed_window_get_active_tab">
        <doc xml:space="preserve">Gets the active #XedTab in the @window.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the active #XedTab in the @window.</doc>
          <type name="Tab" c:type="XedTab*"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a XedWindow</doc>
            <type name="Window" c:type="XedWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_active_view" c:identifier="xed_window_get_active_view">
        <doc xml:space="preserve">Gets the active #XedView.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the active #XedView</doc>
          <type name="View" c:type="XedView*"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #XedWindow</doc>
            <type name="Window" c:type="XedWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_bottom_panel"
              c:identifier="xed_window_get_bottom_panel">
        <doc xml:space="preserve">Gets the bottom #XedPanel of the @window.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the bottom #XedPanel.</doc>
          <type name="Panel" c:type="XedPanel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #XedWindow</doc>
            <type name="Window" c:type="XedWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_documents" c:identifier="xed_window_get_documents">
        <doc xml:space="preserve">Gets a newly allocated list with all the documents in the window.
This list must be freed.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">a newly
allocated list with all the documents in the window</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Document"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #XedWindow</doc>
            <type name="Window" c:type="XedWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_group" c:identifier="xed_window_get_group">
        <doc xml:space="preserve">Gets the #GtkWindowGroup in which @window resides.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #GtkWindowGroup</doc>
          <type name="Gtk.WindowGroup" c:type="GtkWindowGroup*"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #XedWindow</doc>
            <type name="Window" c:type="XedWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_message_bus" c:identifier="xed_window_get_message_bus">
        <doc xml:space="preserve">Gets the #XedMessageBus associated with @window. The returned reference
is owned by the window and should not be unreffed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #XedMessageBus associated with @window</doc>
          <type name="MessageBus" c:type="XedMessageBus*"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #XedWindow</doc>
            <type name="Window" c:type="XedWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_searchbar" c:identifier="xed_window_get_searchbar">
        <doc xml:space="preserve">Gets the #XedSearchbar of the @window.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #XedSearchbar of the @window.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #XedWindow</doc>
            <type name="Window" c:type="XedWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_side_panel" c:identifier="xed_window_get_side_panel">
        <doc xml:space="preserve">Gets the side #XedPanel of the @window.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the side #XedPanel.</doc>
          <type name="Panel" c:type="XedPanel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #XedWindow</doc>
            <type name="Window" c:type="XedWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state" c:identifier="xed_window_get_state">
        <doc xml:space="preserve">Retrieves the state of the @window.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the current #XedWindowState of the @window.</doc>
          <type name="WindowState" c:type="XedWindowState"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #XedWindow</doc>
            <type name="Window" c:type="XedWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_statusbar" c:identifier="xed_window_get_statusbar">
        <doc xml:space="preserve">Gets the #XedStatusbar of the @window.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #XedStatusbar of the @window.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #XedWindow</doc>
            <type name="Window" c:type="XedWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tab_from_location"
              c:identifier="xed_window_get_tab_from_location"
              introspectable="0">
        <doc xml:space="preserve">Gets the #XedTab that matches with the given @location.</doc>
        <return-value>
          <doc xml:space="preserve">the #XedTab that matches with the given @location.</doc>
          <type name="Tab" c:type="XedTab*"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #XedWindow</doc>
            <type name="Window" c:type="XedWindow*"/>
          </instance-parameter>
          <parameter name="location" transfer-ownership="none">
            <doc xml:space="preserve">a #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_ui_manager" c:identifier="xed_window_get_ui_manager">
        <doc xml:space="preserve">Gets the #GtkUIManager associated with the @window.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the #GtkUIManager of the @window.</doc>
          <type name="Gtk.UIManager" c:type="GtkUIManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #XedWindow</doc>
            <type name="Window" c:type="XedWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_unsaved_documents"
              c:identifier="xed_window_get_unsaved_documents">
        <doc xml:space="preserve">Gets the list of documents that need to be saved before closing the window.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">a list of
#XedDocument that need to be saved before closing the window</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Document"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #XedWindow</doc>
            <type name="Window" c:type="XedWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_views" c:identifier="xed_window_get_views">
        <doc xml:space="preserve">Gets a list with all the views in the window. This list must be freed.</doc>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve">a newly allocated
list with all the views in the window</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="View"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #XedWindow</doc>
            <type name="Window" c:type="XedWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_active_tab" c:identifier="xed_window_set_active_tab">
        <doc xml:space="preserve">Switches to the tab that matches with @tab.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve">a #XedWindow</doc>
            <type name="Window" c:type="XedWindow*"/>
          </instance-parameter>
          <parameter name="tab" transfer-ownership="none">
            <doc xml:space="preserve">a #XedTab</doc>
            <type name="Tab" c:type="XedTab*"/>
          </parameter>
        </parameters>
      </method>
      <property name="state" transfer-ownership="none">
        <type name="WindowState"/>
      </property>
      <field name="window">
        <type name="Gtk.ApplicationWindow" c:type="GtkApplicationWindow"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="WindowPrivate" c:type="XedWindowPrivate*"/>
      </field>
      <glib:signal name="active-tab-changed" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Tab"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="active-tab-state-changed" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="tab-added" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Tab"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="tab-removed" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Tab"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="tabs-reordered" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <interface name="WindowActivatable"
               c:symbol-prefix="window_activatable"
               c:type="XedWindowActivatable"
               glib:type-name="XedWindowActivatable"
               glib:get-type="xed_window_activatable_get_type"
               glib:type-struct="WindowActivatableInterface">
      <virtual-method name="activate" invoker="activate">
        <doc xml:space="preserve">Activates the extension on the window property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="activatable" transfer-ownership="none">
            <doc xml:space="preserve">A #XedWindowActivatable.</doc>
            <type name="WindowActivatable" c:type="XedWindowActivatable*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="deactivate" invoker="deactivate">
        <doc xml:space="preserve">Deactivates the extension on the window property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="activatable" transfer-ownership="none">
            <doc xml:space="preserve">A #XedWindowActivatable.</doc>
            <type name="WindowActivatable" c:type="XedWindowActivatable*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="update_state" invoker="update_state">
        <doc xml:space="preserve">Triggers an update of the extension insternal state to take into account
state changes in the window state, due to some event or user action.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="activatable" transfer-ownership="none">
            <doc xml:space="preserve">A #XedWindowActivatable.</doc>
            <type name="WindowActivatable" c:type="XedWindowActivatable*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="activate" c:identifier="xed_window_activatable_activate">
        <doc xml:space="preserve">Activates the extension on the window property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="activatable" transfer-ownership="none">
            <doc xml:space="preserve">A #XedWindowActivatable.</doc>
            <type name="WindowActivatable" c:type="XedWindowActivatable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="deactivate"
              c:identifier="xed_window_activatable_deactivate">
        <doc xml:space="preserve">Deactivates the extension on the window property.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="activatable" transfer-ownership="none">
            <doc xml:space="preserve">A #XedWindowActivatable.</doc>
            <type name="WindowActivatable" c:type="XedWindowActivatable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="update_state"
              c:identifier="xed_window_activatable_update_state">
        <doc xml:space="preserve">Triggers an update of the extension insternal state to take into account
state changes in the window state, due to some event or user action.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="activatable" transfer-ownership="none">
            <doc xml:space="preserve">A #XedWindowActivatable.</doc>
            <type name="WindowActivatable" c:type="XedWindowActivatable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="window"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The window property contains the xed window for this
#XedWindowActivatable instance.</doc>
        <type name="Window"/>
      </property>
    </interface>
    <record name="WindowActivatableInterface"
            c:type="XedWindowActivatableInterface"
            glib:is-gtype-struct-for="WindowActivatable">
      <field name="g_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="activate">
        <callback name="activate">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="activatable" transfer-ownership="none">
              <doc xml:space="preserve">A #XedWindowActivatable.</doc>
              <type name="WindowActivatable" c:type="XedWindowActivatable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="deactivate">
        <callback name="deactivate">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="activatable" transfer-ownership="none">
              <doc xml:space="preserve">A #XedWindowActivatable.</doc>
              <type name="WindowActivatable" c:type="XedWindowActivatable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="update_state">
        <callback name="update_state">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="activatable" transfer-ownership="none">
              <doc xml:space="preserve">A #XedWindowActivatable.</doc>
              <type name="WindowActivatable" c:type="XedWindowActivatable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="WindowClass"
            c:type="XedWindowClass"
            glib:is-gtype-struct-for="Window">
      <field name="parent_class">
        <type name="Gtk.ApplicationWindowClass"
              c:type="GtkApplicationWindowClass"/>
      </field>
      <field name="tab_added">
        <callback name="tab_added">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="window" transfer-ownership="none">
              <type name="Window" c:type="XedWindow*"/>
            </parameter>
            <parameter name="tab" transfer-ownership="none">
              <type name="Tab" c:type="XedTab*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="tab_removed">
        <callback name="tab_removed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="window" transfer-ownership="none">
              <type name="Window" c:type="XedWindow*"/>
            </parameter>
            <parameter name="tab" transfer-ownership="none">
              <type name="Tab" c:type="XedTab*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="tabs_reordered">
        <callback name="tabs_reordered">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="window" transfer-ownership="none">
              <type name="Window" c:type="XedWindow*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="active_tab_changed">
        <callback name="active_tab_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="window" transfer-ownership="none">
              <type name="Window" c:type="XedWindow*"/>
            </parameter>
            <parameter name="tab" transfer-ownership="none">
              <type name="Tab" c:type="XedTab*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="active_tab_state_changed">
        <callback name="active_tab_state_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="window" transfer-ownership="none">
              <type name="Window" c:type="XedWindow*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="WindowPrivate" c:type="XedWindowPrivate" disguised="1">
    </record>
    <bitfield name="WindowState"
              glib:type-name="XedWindowState"
              glib:get-type="xed_window_state_get_type"
              c:type="XedWindowState">
      <member name="normal"
              value="0"
              c:identifier="XED_WINDOW_STATE_NORMAL"
              glib:nick="normal">
      </member>
      <member name="saving"
              value="2"
              c:identifier="XED_WINDOW_STATE_SAVING"
              glib:nick="saving">
      </member>
      <member name="printing"
              value="4"
              c:identifier="XED_WINDOW_STATE_PRINTING"
              glib:nick="printing">
      </member>
      <member name="loading"
              value="8"
              c:identifier="XED_WINDOW_STATE_LOADING"
              glib:nick="loading">
      </member>
      <member name="error"
              value="16"
              c:identifier="XED_WINDOW_STATE_ERROR"
              glib:nick="error">
      </member>
      <member name="saving_session"
              value="32"
              c:identifier="XED_WINDOW_STATE_SAVING_SESSION"
              glib:nick="saving-session">
      </member>
    </bitfield>
    <function name="commands_load_location"
              c:identifier="xed_commands_load_location">
      <doc xml:space="preserve">Loads @location. Ignores non-existing locations</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <doc xml:space="preserve">a #XedWindow</doc>
          <type name="Window" c:type="XedWindow*"/>
        </parameter>
        <parameter name="location" transfer-ownership="none">
          <doc xml:space="preserve">a #GFile to be loaded</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
        <parameter name="encoding"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">the #GtkSourceEncoding of @location</doc>
          <type name="GtkSource.Encoding" c:type="const GtkSourceEncoding*"/>
        </parameter>
        <parameter name="line_pos" transfer-ownership="none">
          <doc xml:space="preserve">the line column to place the cursor when @location is loaded</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="commands_load_locations"
              c:identifier="xed_commands_load_locations">
      <doc xml:space="preserve">Loads @locataions. Ignore non-existing locations</doc>
      <return-value transfer-ownership="container">
        <doc xml:space="preserve">the locations
that were loaded.</doc>
        <type name="GLib.SList" c:type="GSList*">
          <type name="Document"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <doc xml:space="preserve">a #XedWindow</doc>
          <type name="Window" c:type="XedWindow*"/>
        </parameter>
        <parameter name="locations" transfer-ownership="none">
          <doc xml:space="preserve">the locations to load</doc>
          <type name="GLib.SList" c:type="const GSList*">
            <type name="Gio.File"/>
          </type>
        </parameter>
        <parameter name="encoding"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">the #GtkSourceEncoding</doc>
          <type name="GtkSource.Encoding" c:type="const GtkSourceEncoding*"/>
        </parameter>
        <parameter name="line_pos" transfer-ownership="none">
          <doc xml:space="preserve">the line position to place the cursor</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="commands_save_all_documents"
              c:identifier="xed_commands_save_all_documents">
      <doc xml:space="preserve">Asynchronously save all documents belonging to @window. The result of the
operation is not available, so it's difficult to know whether all the
documents are correctly saved.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <doc xml:space="preserve">a #XedWindow.</doc>
          <type name="Window" c:type="XedWindow*"/>
        </parameter>
      </parameters>
    </function>
    <function name="commands_save_document"
              c:identifier="xed_commands_save_document">
      <doc xml:space="preserve">Asynchronously save @document. @document must belong to @window. If you need
the result of the operation, use xed_commands_save_document_async().</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <doc xml:space="preserve">a #XedWindow.</doc>
          <type name="Window" c:type="XedWindow*"/>
        </parameter>
        <parameter name="document" transfer-ownership="none">
          <doc xml:space="preserve">the #XedDocument to save.</doc>
          <type name="Document" c:type="XedDocument*"/>
        </parameter>
      </parameters>
    </function>
    <function name="commands_save_document_async"
              c:identifier="xed_commands_save_document_async">
      <doc xml:space="preserve">Asynchronously save the @document. @document must belong to @window. The
source object of the async task is @document (which will be the first
parameter of the #GAsyncReadyCallback).

When the operation is finished, @callback will be called. You can then call
xed_commands_save_document_finish() to get the result of the operation.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="document" transfer-ownership="none">
          <doc xml:space="preserve">the #XedDocument to save.</doc>
          <type name="Document" c:type="XedDocument*"/>
        </parameter>
        <parameter name="window" transfer-ownership="none">
          <doc xml:space="preserve">a #XedWindow.</doc>
          <type name="Window" c:type="XedWindow*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">optional #GCancellable object, %NULL to ignore.</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="async"
                   closure="4">
          <doc xml:space="preserve">a #GAsyncReadyCallback to call when the operation
  is finished.</doc>
          <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">the data to pass to the @callback function.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="commands_save_document_finish"
              c:identifier="xed_commands_save_document_finish">
      <doc xml:space="preserve">Finishes an asynchronous document saving operation started with
xed_commands_save_document_async().

Note that there is no error parameter because the errors are already handled
by xed.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if the document has been correctly saved, %FALSE otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="document" transfer-ownership="none">
          <doc xml:space="preserve">a #XedDocument.</doc>
          <type name="Document" c:type="XedDocument*"/>
        </parameter>
        <parameter name="result" transfer-ownership="none">
          <doc xml:space="preserve">a #GAsyncResult.</doc>
          <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
        </parameter>
      </parameters>
    </function>
    <function name="debug" c:identifier="xed_debug">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="section" transfer-ownership="none">
          <type name="DebugSection" c:type="XedDebugSection"/>
        </parameter>
        <parameter name="file" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="line" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="function" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="debug_init" c:identifier="xed_debug_init">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="debug_message"
              c:identifier="xed_debug_message"
              introspectable="0">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="section" transfer-ownership="none">
          <type name="DebugSection" c:type="XedDebugSection"/>
        </parameter>
        <parameter name="file" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="line" transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="function" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="marshal_BOOLEAN__OBJECT"
              c:identifier="xed_marshal_BOOLEAN__OBJECT">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <type name="GObject.Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="invocation_hint"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="marshal_BOOLEAN__VOID"
              c:identifier="xed_marshal_BOOLEAN__VOID">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <type name="GObject.Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="invocation_hint"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="marshal_VOID__BOOLEAN_POINTER"
              c:identifier="xed_marshal_VOID__BOOLEAN_POINTER">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <type name="GObject.Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="invocation_hint"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="marshal_VOID__BOXED_BOXED"
              c:identifier="xed_marshal_VOID__BOXED_BOXED">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <type name="GObject.Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="invocation_hint"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="marshal_VOID__INT_INT"
              c:identifier="xed_marshal_VOID__INT_INT">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <type name="GObject.Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="invocation_hint"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="marshal_VOID__OBJECT_BOXED_FLAGS"
              c:identifier="xed_marshal_VOID__OBJECT_BOXED_FLAGS">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <type name="GObject.Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="invocation_hint"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="marshal_VOID__OBJECT_BOXED_INT_BOOLEAN"
              c:identifier="xed_marshal_VOID__OBJECT_BOXED_INT_BOOLEAN">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <type name="GObject.Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="invocation_hint"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="marshal_VOID__UINT64_UINT64"
              c:identifier="xed_marshal_VOID__UINT64_UINT64">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <type name="GObject.Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="invocation_hint"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="message_type_identifier"
              c:identifier="xed_message_type_identifier"
              moved-to="MessageType.identifier">
      <doc xml:space="preserve">Get the string identifier for @method at @object_path.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">the identifier for @method at @object_path</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="object_path"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">the object path</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="method"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">the method</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="message_type_is_supported"
              c:identifier="xed_message_type_is_supported"
              moved-to="MessageType.is_supported">
      <doc xml:space="preserve">Returns if @type is #GType supported by the message system.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if @type is a supported #GType</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve">the #GType</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="message_type_is_valid_object_path"
              c:identifier="xed_message_type_is_valid_object_path"
              moved-to="MessageType.is_valid_object_path">
      <doc xml:space="preserve">Returns whether @object_path is a valid object path</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if @object_path is a valid object path</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="object_path"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">the object path</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
